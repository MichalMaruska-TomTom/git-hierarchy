git-hierarchy (5.46) release; urgency=medium

  * drop git-diff-segment, improve "git-segment --diff"
  * git-sum: change the -n option to avoid merge at all
  * move function from git-rebase-origin & rename fetch_upstream_of
  * when test is not required, but updateness-info is desired, don't output
  * test_commit_parents -- change to output to stdout
  * dump_sum discard the output of testing  unless testing is requested
  * fetch_upstream_of: suppress verbosity a bit
  * improve comments
  * use zsh colors
  * git-rebase-origin: don't test while walk-down
  * git-sum: fix the -m numbering option

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 01 Oct 2023 20:08:17 +0200

git-hierarchy (5.45) release; urgency=medium

  [ Michal Maruska ]
  * git-restore-hierarchy: use full reference (from names)
  * git-restore-hierarchy: careful to reset checked-out branch
  * git-restore-hierarchy: now the order (in the serializion) is reversed
  * zsh: drop unused code
  * git-graph: check the -i option
  * git-store-hierarchy: when -t mode, the commit to tag must be given
  * _git-rebase-origin: more options

 --  <mmaruska@gmail.com>  Thu, 13 Jul 2023 00:11:54 +0200

git-hierarchy (5.44) release; urgency=medium

  [ Michal Maruska ]
  * git-restore-hierarchy: sq rename $branch
  * zsh: _git-restore-hierarchy & _git-store-hierarchy
  * zsh: _git-graph
  * zsh: _git-rebase-poset -- clean-up
  * zsh: fix _git-store-hierarchy
  * still fix for the dump_ref_without_ref change
  * git-store-hierarchy: fix usage() and add -v option
  * walk_down_from: correct dfs to output in topological order

 --  <mmaruska@gmail.com>  Wed, 12 Jul 2023 15:50:23 +0200

git-hierarchy (5.43) release; urgency=medium

  [ Michal Maruska ]
  * sum_resolve_summands: backfill a provided array
  * dump_ref_without_ref -- drop newline
  * fix resolved format for sum
  * dump_ref: drop final newline
  * clean up comments
  * fix comment
  * git-store-hierarchy: -c to commit, othwerwise only stdout
  * fix resolved format for sum
  * git-store-hierarchy -c option
  * git-store-hierarchy: use function, improve the commit message
  * shorten the name
  * set_branch_to (functions): quietly, git-segment quietly
  * git-store-hierarchy: -t to tag
  * git-restore-hierarchy: from -t or -b, check-only (-c), dump (-n)
  * spaces
  * git-restore-hierarchy -v verbose & non-check will run the check too
  * fix mktemp
  * functions.sh: clean up
  * git-sum-branches: clean up (still "noreset" dubious)
  * git-restore-hierarchy: force option (-f) to update existing segments/sums
  * git-sum: rename to $prune
  * git-sum: rename to $branch
  * git-sum: -i incrementally do merges? -- useful?
  * git-sum-branches: clean up

 --  <mmaruska@gmail.com>  Mon, 10 Jul 2023 01:29:45 +0200

git-hierarchy (5.42) release; urgency=medium

  [ Michal Maruska ]
  * git-sum: clean up & do not merge multiple-times
  * git-sum: reduce verbosity

 --  <mmaruska@gmail.com>  Tue, 04 Jul 2023 15:48:36 +0200

git-hierarchy (5.41) release; urgency=medium

  * avoid using 'column --table' to support ubuntu 20.04

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 29 Mar 2023 13:11:22 +0200

git-hierarchy (5.40) release; urgency=medium

  * git-segment: use ref_extract_name() and colors. Base is a branch
  * git-segment-split: use heads/ when using segment name for git commands

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 29 Mar 2023 13:05:01 +0200

git-hierarchy (5.39) release; urgency=medium

  * git-rebase-origin: stop tracing (with set -x)
  * git-done-segment: careful with subshells, when defining variable
  * dump: quote the name -- possibly with dots (tag name)
  * xdot: useless addition to the edge
  * xdot related comments
  * git-segment: use colors in usage()
  * git-segment: reimplement the option processing -> invoking actions
  * _git-segment: long options & not only remote-branches as base?
  * _git-segment: I must invoke _arguments once
  * use set_branch_to
  * zsh/_git-sum-branches adapt to -s option
  * xdot: invoke gitk without ambiguity
  * functions: ERROR & report the failure of resolving ambiguity
  * use -R for _arguments '....-> state'
  * git-rebase-segment: name it segment, and avoid ambiguity with tags
  * sum/segment commands take the NAME, while the rest must handle generic ref
  * ref_extract_name
  * new: git-done-sum
  * git-clone-segment: always use heads/ when using segment name for git commands
  * add _git-segment-patches
  * rework _git-segment: the various 'modes'
  * git-segment-patches: correctly $0 in usage, and heads/$segment
  * git-done-sum: commit first
  * git-done-sum: avoid making a new branch
  * new _git-done-sum
  * git-graph: detect the git environmnent AFTER getopt processing
  * git-tag-hierarchy: add usage

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 28 Mar 2023 17:45:17 +0200

git-hierarchy (5.38) release; urgency=medium

  * _git-rebase-poset: zsh complete
  * d/control: change provider of column(1) to bsdmainutils
  * git-graph: improve usage()
  * fix git-graph: segment formatting with -t

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 21 Dec 2022 16:21:20 +0100

git-hierarchy (5.37) unstable; urgency=medium

  * fix the long option
  * graph: show as tooltip the "description" of the branch-segment
  * git-rebase-poset: improve usage()

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 19 Dec 2022 01:43:59 +0100

git-hierarchy (5.36) unstable; urgency=medium

  * git-rebase-origin: pass --debug down to git-rebase-poset
  * spaces
  * fix long options spec for getopt to sync with short: colons for arguments
  * Explain the error due to unexpected option or missing argument

 -- Michal Maruska <mmaruska@gmail.com>  Sat, 18 Jun 2022 00:56:11 +0200

git-hierarchy (5.35) unstable; urgency=medium

  * git-sum-branches: treat the trivial case correctly
  * git-sum-branches: --quiet option to suppress info
  * dot format for sums: leave newline
  * debian: require xdot
  * Replace stash_if_non_clean with mmc_stash_if_non_clean
  * new command: git-shift-border
  * git-shift-border: provide usage, check params#
  * Zsh completion _git-shift-border
  * git-delete: -r option to rebase (depending segments) on the base
  * Support non-numeric shift
  * Zsh tab: git-segment -b
  * Zsh tab: revert wrong interpretation of git-segment -r -u
  * Zsh tab: enable stacking
  * Un-used function walk_up_from
  * git-rebase-poset: fix handling of 'excluded' refs
  * git-shift-border: document what the STEP is, support number correctly

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 14 Mar 2022 15:05:53 +0100

git-hierarchy (5.34) unstable; urgency=medium

  [ Michal Maruska ]
  * reduce verbosity (on sums when rebase -n)
  * Improve logging during test_commit_parents()
  * test_commit_parents: start to set "equal=old", and present it in xdot
  * git-graph: default to xdot on X
  * Make the outdated edges colored & bolder
  * git-done-segment: on -a properly abort cherry-pick
  * Don't use ascii colors for 'symbolic' format on sums
  * Drop the temporary branch used for summing
  * dump_whole_graph_tsort: don't use temporary file
  * Mention long options in usage()
  * git-rebase-poset: rename git-drop-in-hierarchy to git_replace_in_hierarchy
  * git-rebase-poset: git-clone-sum
  * Even if we skip over, we still have to rebase, don't we?
  * git-rebase-poset: clone-hierarchy at once

 --  <mmaruska@gmail.com>  Thu, 22 Apr 2021 14:41:28 +0200

git-hierarchy (5.32) unstable; urgency=medium

  [ Michal Maruska ]
  * git-graph: use -x option for draw-tsort-graph
  * fix the logging/tracing functions
  * git-sum-branches: use a temporary branch to limit the reflog
  * git-sum-branches: use long options to invoke git-merge
  * Use the logging/tracing functions
  * dump_sum: always check the up-to-date status
  * dot: Use blue color for ignored-status sums.
  * test_commit_parents: comments & reformat
  * git-graph: Use the "processed" array to avoid duplicated edges/nodes

 --  <mmaruska@gmail.com>  Tue, 23 Mar 2021 02:27:58 +0100

git-hierarchy (5.31) unstable; urgency=medium

  [ Michal Maruska ]
  * sq rename DEBUG->debug
  * Detect missing parent !
  * test_commit_parents: exit if bijection is found!
  * print the hints!
  * fix: test the missing summand after trying them
  * walk_down_from: accept --notest option
  * git-walk-down: -t to avoid tests
  * and gitk-poset to take advantage of that!
  * global_test_off:
  * new git-range-diff-segments
  * Provide URL=gitk:// for dot format
  * git-graph: rename to "debug"
  * git-graph: support multiple top nodes (on cli)
  * drop git-check-sum
  * git-rebase-origin: move DEBUG/INFO to functions
  * git-walk-down: migrate to geteopt
  * dump_sum: correctly close with newline for ...raw & tsort
  * git-walk-down: still fix the getopt migration
  * walk_down_from: improve logging
  * still more fixes:  ::  is for optional!
  * emit proper (red) error messages
  * git-rebase-origin: use --oneline logs to report upstream changes
  * add install-libs Makefile target
  * adapt the zsh completion to rename of segment-split!
  * git-walk-down: document long options in usage
  * debug_trace: use in git-sum-branches
  * git-rebase-poset: use long options for git-walk-down
  * git-graph: invoke walk_down_from with --notest
  * test_commit_parents: if summand moved ahead, mark as solved
  * test_commit_parents: summand as moved parent is ok
  * test_commit_parents: fix the missing parent detection.
  * At least regroup the cecho-related functions. Limit use of $reason

 --  <mmaruska@gmail.com>  Wed, 17 Mar 2021 04:05:03 +0100

git-hierarchy (5.30) unstable; urgency=medium

  [ Michal Maruska ]
  * git-sum -n   to number the summands.
  * Use columnt(1) for segment list
  * new zsh/_git-sum-branches
  * rename to git-segment-split
  * symbolic format: drop space
  * symbolic: use column(1)
  * symbolic sum
  * test_commit_parents: set $reason
  * dump_sum: print $reason on failure
  * symbolic format: use color for the sum names
  * use proper debug variable
  * git-rebase-poset: use 'debug' variable, and pass it down
  * rename commit_ids_summands -> summands_commit_ids
  * sq + debug on separate lines
  * rename commit_ids_sum_parents -> parents_commit_ids
  * test_commit_parents: don't fail when summands moved forward, or rebased.
  * use TEMPDIR for mktemp -t
  * git-sum-branches is the only user of the strict check
  * fix shell
  * git-rebase-poset: fix passing the debug option

 --  <mmaruska@gmail.com>  Mon, 08 Feb 2021 23:37:51 +0100

git-hierarchy (5.29) unstable; urgency=medium

  * git-sum-branches: compare with test_sum_is_intact !
  * git-sum-branches: convert getopts to getopt
  * use check_getopt
  * git-rebase-poset: getopts -> getopt
  * new format "name"
  * git-rebase-segment: implement -n to dry run.
  * git-sum-branches: implement the -n --dry option
  * rebase-ref: implement -n for dry run
  * fix the "shift" in getopt -- arguments
  * git-rebase-poset: reduce verbosity
  * rebase-poset: don't record on dry operation
  * git-sum-branches/segment: dry operation only prints & exits with 0
  * dump_whole_graph_tsort: check the sums are intact
  * git-graph: implement -i option
  * git-graph: clean up & reindent
  * git-segment: use getopt check function
  * git-rebase-poset: implement dry
  * git-rebase-poset implement -x --exclude option to avoid rebasing a ref
  * git-rebase-poset: logging changed
  * git-graph: rename to "dump_action"
  * summands_of: document & reindent
  * dump_sum: use summands_of
  * Use sum_resolve_summands()
  * Translate the base into segment name immediately.
  * dump_sum: optionally test
  * delegate dump_sum to make the check for 2 walking functions
  * sum_resolve_summands: don't drop refs/head
  * Clearly mark refs as not files (git log cmdline)
  * Comments in functions.sh
  * For dot don't err on failure, but set the sum color to red

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 14 Jan 2021 23:04:21 +0100

git-hierarchy (5.28) unstable; urgency=medium

  [ Michal Maruska ]
  * git-rebase-poset: fix invocation of git-walk-down with -i
  * git-rebase-origin: fix the status test
  * gitk-poset add -i option to work with broken poset
  * _git-rebase-poset complete for *-ref too
  * git-split-segment -b option to use the bottom part as new segment
  * git-split-segment: formalize the initial check
  * correct name as OPTARG
  * git-sum: continue after reset of -r

 --  <mmaruska@gmail.com>  Tue, 12 Jan 2021 11:47:13 +0100

git-hierarchy (5.27) unstable; urgency=medium

  * invert the option -i
  * Avoid the header about segment, just dump the patch-ids
  * -i show also the sha
  * git-done-segment: implement the -a option to abort the rebase
  * git-segment: fix the description of "start"
  * git-segment: report "clean"
  * move sum_resolve_summands
  * Add parameter to test_commit_parents()
  * Use test_sum_is_intact when discovering the hierarchy
  * test_commit_parents try to pass the parent commits as params
  * improve diagnostics of mismatch
  * test_sum_is_intact -- fix the logic (inverted)
  * Introduce known_divergent to relax the test for definition.
  * git-walk-down: add -i option
  * git-rebase-origin: pass -i down to git-walk-down
  * git-rebase-poset: support -i to pass it to git-walk-down
  * git-rebase-origin: don't fetch multiple-times from one remote/branch
  * git-rebase-origin: pass -i to git-rebase-poset
  * Use quoting to test array-membership
  * git-rebase-origin: Don't ignore failure of $(git-walk-down ... )

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 28 Dec 2020 13:29:37 +0100

git-hierarchy (5.26) unstable; urgency=medium

  * git-segment: rebase immediately if requested
  * shell var. readonly
  * git-segment: sq --rebase option
  * Make sum in the graph green, not red
  * Move test_commit_parents into functions
  * dump_whole_graph_tsort: new function atop dump_whole_graph
  * git-graph: dump in order
  * git-store-hierarchy: usage
  * invert the order
  * Small typos corrected
  * debian: compat 10
  * git-restore-hierarchy-from-branch: usage & rename variable
  * git-restore-hierarchy-from-branch: new option to List remote branches
  * Comments in test_commit_parents()
  * git-sum: improve usage()
  * git-sum: add -s option -- to position the sum branch initially
  * reformat
  * reformat try_to_expand()
  * git-sum-branches: reformat getopts & comments
  * git-restore-hierarchy-from-branch: first process all options
  * git-restore-hierarchy-from-branch: don't create sum if already exists
  * git-restore-hierarchy-from-branch: Use the right start to create segment
  * dump_segment: "resolved" format
  * Implement the format selection with 'case' shell
  * new format: -r  resolved
  * New tool git-tag-hierarchy
  * git-segment: document the --long options in usage()
  * title the show HEAD sha
  * show the segment lenght in yellow
  * New mode to show the patch-id (option -i)

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 06 Dec 2020 19:11:41 +0100

git-hierarchy (5.25) unstable; urgency=medium

  * Remove unintended backtics in a string.
  * git-rebase-poset: implement a REPLACE operation: summands/bases are changed
  * git-segment: make the rebasing log more informative

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 03 Nov 2020 15:31:37 +0100

git-hierarchy (5.24) unstable; urgency=medium

  * usage for git-split-segment
  * new: git-diff-segment
  * debian: depend on imagemagick
  * _git-split-segment basic
  * git-split-segment: improve usage()
  * git-split-segment: verify splitting, handle current-branch
  * _git-split-segment show the recent commits
  * rename to git-segments-balance
  * Stop using tempfile, use mktemp instead
  * git-walk-down: allow explicit format selection (-f option)
  * new function walk_down_from
  * Move description into usage() output
  * git-walk-down: use the walk_down_from function
  * git-graph: use walk_down_from function for 1 parameter
  * Add zsh completions: _git-graph _git-rebase-segment
  * Move git-cp-to to mmc-shell

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 27 Oct 2020 02:03:49 +0100

git-hierarchy (5.23) unstable; urgency=medium

  * Don't create the segment, if any of the 3 references is wrong
  * Correct the ZERO handler: exit!
  * indentation
  * small reformatting
  * git-diff-segments: print usage if insufficient arguments provided
  * git-diff-poset-dumps: improve usage & LOG descriptions
  * git-diff-segments: improve usage()
  * git-diff-segments: improve output
  * git-diff-poset-dumps: take just the segment name, not the base
  * dump_sum: don't translate - into _ for symbolic format
  * git-update-hierarchy add colors
  * drop unused variable
  * spaces
  * Switch dump_symbolic_ref to keep the "ref: ", so use dump_ref_without_ref for the old API

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 16 Aug 2020 13:42:41 +0200

git-hierarchy (5.22) unstable; urgency=medium

  * debian:suggest graphviz
  * tabs
  * correct the git trick for Zsh tab completion
  * tabs
  * drop duplicate
  * tabs
  * git-rename: so git fails to expand non-existent ref, at least handle it robustly
  * expand_ref: do not prepend head.
  * _git-segment: use functions from _git
  * tabs
  * git-delete: improve clarity of usage, and error-on-exit message
  * [FIX] gitk: Cut the inclusion at the base
  * Document limitation of gitk -- cannot position initially at a given commit
  * drop zsh for _git-cp-to

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 07 Apr 2020 19:40:36 +0200

git-hierarchy (5.21) unstable; urgency=medium

  * bump up the version

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 11 Dec 2019 13:13:15 +0100

git-hierarchy (5.20) release; urgency=medium

  * git-rebase-origin: ff to the updated upstream!
  * Expect a valid TMPDIR (not /run/tmp).
  * git-reapply-segment: fix shell array vs cd
  * sq: find_commit_of_patchid takes a 2nd
  * git-cp-hierarchy: Warn about a limitaton
  * git-cp-hierarchy: work in $destdir
  * spaces

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 11 Dec 2019 01:51:18 +0100

git-hierarchy (5.19) release; urgency=medium

  * new: split & balance segment(s)
  * git-segment: when describing a segment, skip the git history for -s option
  * rebase_empty_segment: hard-reset when it's the current branch
  * gitk-poset: more care with "title"
  * rename git-tsort to git-graph

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 18 Sep 2019 10:54:28 +0200

git-hierarchy (5.17) release; urgency=medium

  * move git-branch-exists to git-functions.sh
  * Fix git-store-hierarchy: make the commit with parent if there is one.
  * git-restore-hierarchy-from-branch: -n to view only, usage(), and use local _hierarchy branch
  * git-sum: avoid re-adding a summand.
  * drop PROGRAM (now in functions.sh)
  * git-update-hierarchy: new tool to observe the hierarchy changes
  * fix the sum check -- correct the Zsh reverse index
  * we do use colors(), so autoload them.
  * dump_sum/tsort -- does it change?
  * git-walk-down: fix missing extern_color var
  * git-walk-down new format -t to simply dump the graph.
  * git-walk-down: simplify
  * git-walk-down: Break the -r format:
  * Invert the default & options:
  * gitk_from_graph function, common for 2 cases
  * the limited global case ... use the new format of git-walk-down.
  * the single segment/sum case: use common vars/launcher.
  * fixme: adapt to a change format of "git-walk-down -r"
  * Handle correctly bases of form refs/heads/* and don't fetch if no remote is associated
  * document my consideration on the Transfer.
  * improve shell-- var naming, readonly
  * fix uninintialized var

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 29 Aug 2019 09:16:35 +0200

git-hierarchy (5.16) release; urgency=medium

  * Symbolic format for sum/segment
  * half-removed report_error()
  * use die() to explain the reason
  * Use mmc-functions!
  * use dump_stack from mmc-functions
  * Symbolic format
  * sum_format defaults to the segment one
  * have a default segment format
  * sq symbolic
  * improve the usage()
  * drop unused
  * symbolic
  * improve usage
  * short-cut git-expand-ref
  * symbolic
  * Produce the segment & sum lists in alphabetic order.
  * functions: save the $ZSH_ARGZERO
  * note on git-dump-refs ... being only about Segment patches!
  * drop ambiguity when parsing the new segment "start"
  * store-hierarchy: new tool
  * rename git-store-hierarchy
  * git-restore-hierarchy-from-branch: new command
  * drop recreate-sums -- was used to convert from prehistoric format to the current one.
  * publish the 2 new tools

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 04 Feb 2019 12:44:16 +0100

git-hierarchy (5.15) release; urgency=medium

  * move git-copy-commit to mmc-shell
  * git-dump-refs: to stdout
  * git-dump-refs: document ordering
  * git-dump-refs: improve the git-check-sum
  * new function segment_base_name
  * git-sum: fix for inside worktree
  * git-dump-refs: split dump_segment to handle better variables
  * git-walk-down clean up
  * incomplete attempt to report errors from a pipeline

 -- Michal Maruska <michal@ubuntu>  Mon, 07 Jan 2019 10:36:49 +0100

git-hierarchy (5.14) release; urgency=medium

  * git-diff-poset-dumps: deduce the hierarchy.dump filenames
  * fix: don't use the "status" reserved r/o variable.
  * git-diff-poset-dumps: Unify the Step logs
  * git-diff-segments: use the installed awk file
  * git-diff-segments: info to stderr, show the diff command.
  * git-dump-refs: drop empty line
  * git-dump-refs:  -o to dump into hierarchy.dump
  * git-reapply-segment: new command
  * git-diff-poset-dumps: unset -x
  * git-diff-segments: be verbose only withe the -v option
  * git-segment-patches: Do not create the output directory if only patch-id is output
  * drop old comments, transcripts
  * git-diff-poset-dumps: compare the sums also
  * git-diff-poset-dumps: add -v option
  * drop
  * git-copy-commit: new
  * functions.sh: reformat comments.
  * git-segment-compare: drop obsolete
  * simplify  show_commit & split into find_commit_of_patchid()
  * git-diff-segments: use Process Substitution
  * git-rebase-segment: drop the "git rebase" based implementation
  * promote the exit status past the unstash step

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 02 Jan 2019 16:19:02 +0100

git-hierarchy (5.13) release; urgency=medium

  * fix git-tsort -x: specify the segment_format
  * rename current_branch_poset to current_branch_name
  * try to depend on mmc-shell. Half of functions.sh should be moved there.
  * Move part of the functions to mmc-shell, and source that git-functions.
  * new commands: git-diff-poset-dumps, git-diff-segments
  * git-rebase-segment: explain on failure-exit

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 27 Dec 2018 12:28:27 +0100

git-hierarchy (5.12) release; urgency=medium

  * dump_sum with the explicit format!
  * drop verbosity
  * git-tsort: default to the -l log format. Porcelain to use -t for the tsort format.
  * gitk-poset: fix for the new api
  * git-rebase-segment: Do explay why it stops when cherry-pick in progress

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 19 Dec 2018 10:33:45 +0100

git-hierarchy (5.11.2) release; urgency=medium

  * fix expand_ref for ref/*
  * Include INFO & WARN & STEP in functions.sh
  * new dump_associative_array() in functions.sh
  * integrate git-cp-hierarchy git-reapply-segment together.
  * git-segment-patches new option -q to not list the generated files.
  * git-check-sum: simplify?
  * git-dump-refs: fail if not "clean"
  * new diff-segments
  * more complicated coloring in logs
  * short-cut expand_ref (library call, not external tool)
  * move dump-segment to .../share/
  * find_roots_and_tops: new function, with side-effect
  * dump_segment: change api to use explicit format, dump_whole_graph too.
  * adapt git-tsort
  * git-tsort: new format to invoke "git log"
  * git-walk-down: adapt to the new api of dump_segment with segment_format.
  * git-walk-down: new format -l for "git log --graph"
  * git-walk-down: keep-graph -k option
  * git-walk-down: provide the verbose variable needed by find_roots_and_tops
  * gitk-poset: explain the various modes
  * small
  * format
  * simplify info

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 17 Dec 2018 07:52:31 +0100

git-hierarchy (5.10) release; urgency=medium

  * Global variable debug
  * gitk-poset: use the --title option of gitk(1)
  * cd to the top for segment-rebase
  * don't 'rebase' a segment, if a cherry-pick is in progress.
  * expand_ref: Signal error if Git cannot figure it out
  * And suppress the Git's error message when trying to resolve.
  * More care about local (shell) variables
  * drop -x
  * gitk-poset: change the default to show the Whole graph.

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 29 Nov 2018 23:27:47 +0100

git-hierarchy (5.7) release; urgency=medium

  * git-cp-hierarchy: apply correctly the patches. comment: Maybe first should check
  * git-reapply-segment: usage & possibly destdir.
  * new: git-segment-compare
  * git-segment: update the usage() to highlight the modes of operation
  * git-segment: enable defining the tip of the created segment.

 -- Michal Maruska <mmaruska@gmail.com>  Sat, 29 Sep 2018 00:49:39 +0200

git-hierarchy (5.6) release; urgency=medium

  * formalize the marking files -- segment & poset being rebased.
  * Tell git-p4.py about the --git-dir=
  * git-done-segment: verbose on NO-OP
  * git-rebase-origin: Use a function so we can use readonly variables.
  * functions.sh: move trap & variables to the top.
  * Add markdown version of README
  * sq: GIT_DIR is calculated implicitly
  * format fixes
  * Don't search for GIT_DIR before processing "-h"
  * contrib/git-reapply-segment  import whole segment into external repo, under a subpath.
  * git-cp-hierarchy: generalize, but not finished?
  * Be more careful when testing for existance of non-existing. Avoid useless git warning
  * git-cp-hierarchy: make it generic, for complete hierarchy, change the Base ref.
  * git-done-segment: add -h option
  * comments & verbosity.
  * stupid verbosity
  * update readme
  * tabs
  * cherry_pick_in_progress: new function
  * clean: comments, reshuffle, rename var
  * comments
  * git-clone-segment: improve usage.
  * comments
  * Add -v as verbose.
  * On -g include commits down to bases including. + MAX to limit
  * comments Wip
  * rebase_one: drop the -r (readonly) modifier from variable

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 24 Sep 2018 22:31:13 +0200

git-hierarchy (5.5) release; urgency=medium

  * git-rebase-origin fix: for each cycle & git log
  * worktrees: fix ref_exists() and dump_symbolic_ref()
  * cd to toplevel  to rebase-poset. Document --git-common-dir

 -- Michal Maruska <michal@ubuntu>  Mon, 26 Jun 2017 11:47:52 +0200

git-hierarchy (5.4) release; urgency=medium

  * fixlet
  * Save the cherry-picked segment-name, to use it when done.
  * disable the rebase-by-rebase part.
  * shell style
  * Show the git-p4 fetched commits.
  * and also "git fetch"ed.
  * More care to avoid using inexistent .rebasing-segment
  * cd to the top of git repo directory, as MY code assumes it.
  * solve it differently.
  * dubious improvement of Makefile

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 22 Jun 2017 20:20:12 +0200

git-hierarchy (5.3) release; urgency=medium

  * git-rebase-origin: support for P4 (remote) sources/branches
  * rebase: Support special case of empty segment -- cherry-pick cannot handle it.
  * git-segment-patches: correctly from start (not base)
  * git-segment-patches: new -p option to dump the patch-ids instead.

 -- Michal Maruska <michal@ubuntu>  Tue, 23 May 2017 08:53:54 +0200

git-hierarchy (5.2) release; urgency=medium

  * rebase-segment: do not bind "temp" to track, we discard it immediately.
  * git-done-segment: new in place of the post-rebase hook. Now after cherry-pick

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 15 May 2017 12:52:58 +0200

git-hierarchy (5.1) release; urgency=medium

  * Use cherry-pick to rebase a segment. Hopefully it's quicker?
  * whitespace
  * git-segment-patches: pass args to git-format-patch(1).
  * git-segment-patches: put the patches in a optionally indicated directory.
  * git-segment --diff to show the complete diff (with start).
  * git-sum-branches: docs
  * "rebase" a created sum immediately
  * new git-cp-hierarchy: copy between git repos.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 19 Apr 2017 13:15:37 +0200

git-hierarchy (5.0) release; urgency=medium

  * fix GIT_DIR in case of inside work-tree
  * git-rename: chicken & egg: I cannot ask 'git' to predict the full-name before.
  * gitk-poset: fix for segments, and start to show something for -g/"all-graph" case
  * git-sum-branches: document & shell-clean test_commit_parents (equivalent of git-check-sum ?)
  * git-sum-branches: better diagnostics on error.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 05 Apr 2017 11:31:46 +0200

git-hierarchy (4.9) release; urgency=medium

  * Handle  "git rebase" not even starting
  * git-rebase-origin: clean usage(), check for >1 arguments, conditional verbosity
  * git-rebase-poset:  -n as dry-only
  * TABs & lines
  * git-rebase-segment: stash when needed
  * git-rebase-poset: stash around
  * use test(1)
  * set_symbolic_reference: fix
  * new function: set_branch_to
  * Convert && into if/then, to avoid non-zero-status & failure
  * git-rebase-segment: Use current branch by default.
  * Share stash_if_non_clean() and unstash_if_stashed() functions
  * white-space
  * sq: git-rebase-segment -v option
  * git-clone-segment: now new-base is obligatory.
  * git-rebase-origin: use a function for the conditional tracing
  * rename: tabs
  * trap: into stderr!
  * review drop_symbolic_ref
  * git-rename: clean, document, use drop_symbolic_ref, reorder git ops!
  * require_clean_work_tree: can call exit, so use it as a sub-command?
  * gitk-poset: -g option still very broken. But at least it removes its temp files.
  * request color during 'git rebase'
  * git-rebase-origin: do inform on fall-back choices!
  * git-rebase-origin: suppress expr(1) output.

 -- Michal Maruska <mmaruska@gmail.com>  Sat, 28 Jan 2017 01:58:59 +0100

git-hierarchy (4.8) release; urgency=medium

  * rename: distinguish non-"symbolic" start references!
  * no more need to drop "refs: ". It's never returned from Git(1)
  * Definitive answer to dump_symbolic_ref (i.e. just 1 step resolution)
  * fix: git branch -f refs/heads/aa does not work on branch aa
  * Move commit_id() to functions. And use it.
  * use --restart (rather than -r).
  * git-rebase-segment: allow optionaly fixed start.

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 19 Jun 2016 20:06:24 +0200

git-hierarchy (4.7) release; urgency=medium

  * Fix handling of dump_ref(): Split dump_ref & dump_symbolic_ref
  * git-rebase-origin: enumerate the upstream branch correctly.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 20 Apr 2016 03:06:23 +0200

git-hierarchy (4.6) release; urgency=medium

  * zsh-tab: rename git-poset
  * current_branch_poset: use instead of missing argument
  * git-rebase-origin: fetch the remotes followed by bases.
  * dump_whole_graph: extract from git-tsort
  * gitk-poset: global version
  * sq: default dump_format
  * Suppress space before tab.
  * ignore if the hook symlinks exist correctly
  * zsh Tab compeltion for _git-clone-segment
  * new cmd: git-segment-patches
  * git-rebase-origin: drop the "-o remote" option to simplify.
  * git-rebase-origin: dry-only -d option
  * git-rebase-origin: handle the base as a local & also remote branch
  * simplify the hook installation warnings
  * Stop using "cat path" to test/resolve heads. use rev-parse or symbolic-ref

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 30 Mar 2016 01:08:57 +0200

git-hierarchy (4.5) release; urgency=medium

  * drop ambiguity between ref & filename (was "debian")
  * new: git-clone-segment
  * git-clone-segment: usage & checks
  * more POSIX_ARGZERO
  * gitk-poset: for sums, show the sum itself.
  * gitk-poset: from the start (not base)

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 23 Dec 2015 16:58:36 +0100

git-hierarchy (4.4) release; urgency=medium

  * Forced to use zsh, due to trapping ZERR errors.
  * comments
  * Postpone using Git after --help is ruled out.
  * Move comments into new file: architecture
  * By default operate on HEAD: git-walk-down
  * Use (un)setopt POSIX_ARGZERO in usage to get the real $0
  * gitk-poset: dwim for sums

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 18 Nov 2015 17:16:59 +0100

git-hierarchy (4.2) release; urgency=medium

  * new command: gitk-segment
  * gitk-segment: accept a sum (poset in general).
  * gitk by default HEAD
  * Fail on unexpected arguments (git-tsort)
  * tsort: announce the graph immediately, if requested to leave it.
  * git-sum-branches: stepwise.
  * use "git rev-parse" rather than cat(1) the ref file.
  * zsh TAB-completions
  * rename tab-completion function. why? ok?
  * git-segment: -c --checkout option.
  * trivial reformat
  * trace:  try_to_expand()
  * drop dead/commented-out code
  * optimization: check_git_rebase_hooks / create hooks only when rebase failed.
  * exit(!) when the post-rebase hooks couldn't be registered. But first save the segment name in any case!
  * trivial spaces/empty lines
  * comments
  * git-reset-segment: more informative.
  * git-sum-branches: optional tracing.
  * FIX: Improve setting & unsetting the temp rebase-* hooks.
  * drop cdbs
  * handle errors by reporting them -- line number & function.
  * The hooks rely on Zsh features -- trapping code.
  * Improve the git hooks to remove itself when necessary.
  * segment: Canonize the base-ref, as we can control the expansion.
  * useless imho
  * Fix TAB-completion for rebase-origin.
  * unfinished: -o to specify the origin (git-rebase-origin)

 -- Michal Maruska <michal@ubuntu>  Thu, 01 Oct 2015 17:51:50 +0200

git-hierarchy (4.1) release; urgency=medium

  * Resolve ref before changing branches/HEAD
  * git-rebase-origin: do fetch by default
  * git-rebase-origin: err on missing arguments
  * git-sum: drop doubled usage()
  * Move expand_ref from git-expand-ref to functions.
  * and fix the unused try_to_expand
  * And use it if requested. Finally.
  * Check it's a sum, before re-making the merge.
  * Distinguish sum branch and the (sum) name.
  * Work in presence of tags named as summand branches.
  * double-quote the git branches names, before pushing to dot(1)
  * fix the dot "format" invocation.
  * git-cp-to: usage(), and check parameters

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 05 Jan 2015 13:24:41 +0100

git-hierarchy (4.0) release; urgency=medium

  * extract common functions out of git-tsort & git-walk-down.
  * git-walk-down: better usage & just 1 arg.
  * clean GRAPH file on exit.
  * documentation on the 2 tools
  * git-recover-symbolic-refs: provide option parsing, usage, and DEBUG
  * name a hash as such.
  * Support more than 2 dump_format-s -- more options use sh-case, rather than if-else.
  * clean git-walk-down
  * the "raw" format of dump_segment/sum
  * adapt git-rebase-poset to explicitly ask for tsort format of git-walk-down
  * dump the bases too.
  * git-walk-down: the post-processing for raw
  * git-rebase-origin: new command
  * unfinished gitk changes
  * use dump_ref_without_ref !
  * comments
  * reformatting
  * git-rebase-origin: use the new option to get the base (from git-walk-down)
  * git-rebase-origin: usage
  * git-rebase-origin: add debugging
  * Use the git-hooks around rebase.
  * new command: git-cp-to mainly for Zsh completion?

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 13 Oct 2014 22:57:12 +0200

git-hierarchy (3.6) release; urgency=low

  * drop core-git patches from master branch
  * Don't (re)merge with 1 summand only.
  * clean usage & check params
  * Make it a function: test_commit_parents
  * Comments in git-sum-*
  * fix shell syntax error: local x=value
  * Explain the 1st summand treatment (reset case)
  * again, local x=value  does not work for value an array!
  * sum-branches: same 1-line step info as in rebase-segment
  * git-segment: optionally list full ref names, unambiguous.
  * Hide the error messages on completion
  * git-sum-branches: fix the --dry case.
  * There are no arguments to git-tsort
  * clean
  * drop obsolete git-walk-down
  * git-sum-branches: fix the --dry case.
  * Silent/quiet option.
  * FUNCTION_ARGZERO

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 03 Sep 2014 13:12:16 +0200

git-hierarchy (3.5) release; urgency=low

  * Don't emit Esc seq on non-terminal
  * git-rebase-poset: Correctly propagate a failure up

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 13 Jun 2014 11:03:23 +0200

git-hierarchy (3.4) release; urgency=low

  * Be quiet on sum update.
  * cdbs -> dh
  * fix git-rename
  * consistent message

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 18 Apr 2014 13:44:00 +0200

git-hierarchy (3.3) release; urgency=low

  * suppress too verbosity on sum up-to-date check.
  * patches: drop tracing
  * comment
  * improve color of tracing
  * Drop the "move-only" option & code.
  * rename DEBUG_OPTIONS to GIT_DEBUG_OPTIONS + reindent.
  * usage
  * test: avoid hardwired path
  * import new git-core
  * Carry gitk
  * gitk comments
  * comment on how Remote heads have the prefix in different background color.
  * fill the bg of start/base prefixes
  * patches: by default diff
  * start treating failures during rebasing.
  * Less verbosity in git-rebase patch
  * git-dump-poset: fix the algo. Drop unused var
  * new way to get .git path
  * fix identation
  * git-rename: usage, check args
  * rename display -> dot_format
  * Add one-line descriptions (to scripts)
  * Document similarities in 3 algs -- 2 + 1 for graph collection
  * git-sum-branches: fix -h, and stash & cd when necessary.
  * comments

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 23 Mar 2014 22:28:14 +0100

git-hierarchy (3.2) release; urgency=low

  * sum: suppress too verbosity
  * patches: reset a segment, only if requested
  * improve sum-validity verification

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 15 Jan 2014 16:56:36 +0100

git-hierarchy (3.1) release; urgency=low
  * New criterion for up-to-date sum.
  * sum: treat the case when 1 summand is the sum itself.
  * git-sum-branches: introduce -v option for verbosity.
  * Propagate -d from git-rebase-poset to git-sum-branches (as -v)
  * patches: try to commit the Segment on successful rebase.
  * drop some verbosity from the patches
  * output Dirty info for git-segment
  * progress-output: highlight the segment names
  * And highlight "sums" too
  * hilight reference

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 07 Jan 2014 17:33:33 +0100

git-hierarchy (3.0) release; urgency=low
  * main features: avoid redoing merges for no reason. Quiet operation.
  *                nice display of the graph.
  * git-reset-segment: add getopt & usage
  * git-reset: either Abort or Commit. (should rename to git-finish-segment-rebase)
  * patches: implement "diff" command
  * tsort: draw the "external" bases as such.
  * Comment on using rebase state to record the segment.
  * shell shortcut
  * Check if the merge needs to be redone. Do nothing if it's current.
  * git-sum-branches: comment & clean
  * comments on Octopus merge
  * clean shell
  * declare git-check-sum obsolete
  * git-tsort: quiet unless -d
  * git-rebase-poset: quiet unless -d
  * git-rebase-ref: quiet unless -d
  * git-rebase-segment: inform when starting rebase
  * propagate the -d option
  * test to make git-rebase invoke itself
  * verbosity in git-rebase for the hooks.
  * document recreate-sums

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 23 Dec 2013 13:11:27 +0100

git-hierarchy (2.18) release; urgency=low

  * Tool to patch/follow the core tools
  * git-sum-branches: Don't lose modified work files & index.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 11 Dec 2013 12:59:26 +0100

git-hierarchy (2.17) release; urgency=low

  * sq: git-segment test: better info on stderr
  * rebase-segment: check argument.
  * Name better a  shell variable
  * Test git-sum existence. And handle expanded ref name.
  * git-segment: handle expanded ref name.
  * git-walk-down: clean up: usage, var names, debug option
  * fixlet -- necessary?
  * git-rebase-poset ... rename the base(s) for minimal segments.
  * git-walk-down: Ensure the graph file is removed on exit.
  * represent the _remote_ branches in the X graph in some way.
  * sum-branches:  improve getopts
  * verbose when re-merging a sum
  * git-rebase-poset: don't invoke git when not necessary!
  * Carry patched files from git-core
  * [git-core] Invoke hook on rebase finished.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 04 Dec 2013 13:41:59 +0100

git-hierarchy (2.16) release; urgency=low

  * Start to guarantee branch name is interpreted as such (and not as filename or other)
  * segment_age
  * for Emacs
  * git-tsort: pass options to draw-tsort-graph. incomplete (skipped)!
  * segment_lenght
  * Enrich the Graph by colors & information of sums/segments.
  * git-reset-* handle correctly the wrong situation
  * Have a test for reference
  * git-segment: exit with meaningful error msg if segment does not exist
  * rename 2 shell variables (x_branch & summand_branches)
  * Filter the base name better -- not finished! / still in.

 -- Michal Maruska <mmaruska@gmail.com>  Sat, 23 Nov 2013 22:51:01 +0100

git-hierarchy (2.15) release; urgency=low

  * zsh-completion: combine 2

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 16 Sep 2013 15:59:47 +0200

git-hierarchy (2.14.1) release; urgency=low

  * make the suggested shell command stand out (on its own line)
  * Improve format of "Show the lag of ..."

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 11 Sep 2013 15:46:15 +0200

git-hierarchy (2.14) release; urgency=low

  * clean completion
  * new completions
  * git-segment migrate to getopt()
  * document the usage
  * isolate list_segments into a function
  * implement git-segment deleting -d
  * remove old code
  * important comments
  * lines
  * have to call eval, and simplest is to use eval set.
  * less verbosity
  * fix the completion ... not clear yet.
  * fix drop_segment & its use in git-segment
  * trivial completion for git-rebase-poset
  * fix restarting (without updating/rebasing)
  * Show the lag of Start behind Base.

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 02 Sep 2013 14:25:01 +0200

git-hierarchy (2.13) release; urgency=low

  * New tool: git-walk-down a local git-tgraph.
  * New: git-walk-down
  * rebase only less-than part
  * irrelevant
  * git-delete: handle more at a time (on cmdline)

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 28 Mar 2013 10:19:22 +0100

git-hierarchy (2.12.1) release; urgency=low

  * [fix] git-set-start takes the segment name, not the start-ref name.
  * usage for git-rename
  * git-rename: don't try to expand the New name.

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 13 Mar 2013 09:30:38 +0100

git-hierarchy (2.12) release; urgency=low

  * Zsh completion for git-reset-segment & Install _all_ the zsh files
  * provide DOC (description) for the zsh completion files
  * Debian: install Zsh files under vendor (not site-)
  * (git-)Delete from sum automatically by default.
  * comments

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 08 Mar 2013 00:11:12 +0100

git-hierarchy (2.11.1) release; urgency=low

  * [FIX] drop now useless exit()

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 25 Feb 2013 17:54:42 +0100

git-hierarchy (2.11) release; urgency=low

  * expand $0 before calling usage() function. Strange
  * Zsh completion
  * git-segment: "-s" option for Zsh completion.
  * Zsh completion
  * format
  * git-check-sum
  * FIX git-delete for sum.
  * completion: _git-sum
  * _git-delete
  * separate _git-segment-name
  * completion for:  git-delete & git-sum
  * git-set-start: make it a function and change the arg:
  * segment: better shell -- local variables
  * [FIX] invoke set_symbolic_reference with a symbolic ref:
  * git-rename: the new might not exist yet. In some cases the Old one might not exist anymore.
  * describe_segment: takes name as arg.
  * New options -u (update) & -r (restart) to dictate the interpretation of args:
  * start documenting issues (with git)

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 25 Feb 2013 15:26:28 +0100

git-hierarchy (2.10) release; urgency=low

  * Move segment base.
  * drop_segment function
  * separate delete sum & integrate into git-delete

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 04 Feb 2013 10:21:01 +0100

git-hierarchy (2.9) release; urgency=low

  * disable Delete functionality of git-sergment. Use git-delete.
  * Use the official tool to git-expand-ref. Anyway fix my hack (shell pipeline).
  * comments & clean

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 19 Dec 2012 22:55:54 +0100

git-hierarchy (2.8) release; urgency=low

  * extract drop_symbolic_ref
  * reformat (moving function upwards)
  * Fix drop_symbolic_ref ?
  * use drop_symbolic_ref for   git-sum -
  * expand-ref ... in right order
  * dump_ref_without_ref ... read the symbolic ref, and strip off the "ref: "
  * git-sum-branches: merge the real branches -- solve one level of the sum sym-refs.
  * merge using git-merge strategies, not shell loop.
  * list segments with bases
  * Fix:  use the fixed git-expand-ref.
  * sum: add the arguments (even without leading +)
  * Compare (variable value) rather than grep.
  * Drop commented-out code.
  * shell
  * delete: don't search refs which are surely not symbolic.

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 10 Dec 2012 23:29:24 +0100

git-hierarchy (2.7) release; urgency=low

  * shell formatting
  * Fix deleting the base sym-reference.
  * shell safety. 1 step
  * git-delete pass through -D to "git branch".
  * Use git-expand-ref to expand user's name for segment _base_.
  * Fix: options go before the argument!

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 07 Dec 2012 13:48:32 +0100

git-hierarchy (2.4) release; urgency=low

  * help/usage for git-rebase-poset
  * help for git-dump-poset

 -- Michal Maruska <mmaruska@gmail.com>  Wed, 05 Dec 2012 01:05:27 +0100

git-hierarchy (2.3) release; urgency=low

  * Provide automatic commit message for Sum merges
  * Stop tracing of segment-rebasing & git-sum.
  * git-delete: don't scan heads, they are not symbolic refs.
  * check the segment has been rebased.
  * tool to officially end the failed segment rebasing.
  * When deleting, remove from a sum (if asked -s).

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 03 Dec 2012 16:43:05 +0100

git-hierarchy (2.2) release; urgency=low

  * recreate-sums to upgrade/turn old sums file into symbolic refs
  * Fix: map to SHA via git rev-list, not git show-ref.
  * Fix: spell correctly git-set-start
  * Use dump_ref as the only place to cat(1) the symref file.
  * git-tsort: usage, options, new: invoke draw-tsort-graph when requested.
  * new: git-dump-refs & git-recover-symbolic-refs.
  * fix: use the correct variable
  * when recovering symrefs, maybe clone a remote branch to local one.
  * git-sum: create branch only if modifying definition.
  * git-recover-symbolic-refs:

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 26 Nov 2012 00:37:57 +0100

git-hierarchy (2.1) release; urgency=low

  * New git-set-start:  & use it.
  * Fix: find correctly the next available Index for sums.

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 19 Nov 2012 10:35:47 +0100

git-hierarchy (2.0) release; urgency=low

  * When assigning cmd output to a zsh array parameter, braces are neede.
  * inform about the Graph filename (when left over).

  [ Using symbolic refs for all -- sums ]
  * list_sums: new approach
  * new: git-expand-ref
  * List, dump, reset, delete, add reimplmented.
  * Graph vs new sums: generate the sum-nodes
  * dump_ref function: to expand indirect refs, by just 1 level.
  * Delete sum or its definition.
  * When deleting a ref, check all summands in the new format.
  * git-sum-branches: get the summands the new way.
  * function summands_of to list the (full) components of a sum (simple name).
  * summands_of: dereference the Numbers.
  * is_sum  adapted.
  * obsolete segment_base
  * dump_poset: doc/usage & expand the argument.
  * dump-poset: work with expanded rerfs. But the segments/sums have simple names.
  * drop SUM_DIR
  * adapt git-tsort (to new Sums implementation).
  * format
  * when renaming ... normalize the name.
  * rename the branch itself soon.
  * rename_symbolic_reference
  * rename segment (branch)
  * rename_symbolic_reference: used for sums
  * renaming an addend (of a sum)
  * todo
  * git-delete:  check properly using the new  dump_ref.
  * comment
  * use full ref name (to avoid ambiguity).
  * Hide the complications in   set_symbolic_reference
  * in fact set_symbolic_reference reverse
  * when renaming.. don't bother checking other refs, for now.
  * set_symbolic_reference is common function
  * add_to_sum: fix bug & use the set_symbolic_reference f.
  * fix shell arithmetics
  * fix: local variables in Functions
  * local variables 1
  * segment_base: full ref
  * rename var keep_graph_file
  * fix array assignment
  * fix: grep vs sed
  * fix my understanding of Variables
  * fix in segment_base (stripping /)
  * shell -- necessary?
  * function Local variables!
  * rebase-ref: extract & use the branch name
  * tsort: print the sum ref in full.
  * rebase-segment: correct the full-ref expansion.
  * comments & tracing & refomattig shell variable assignment
  * rename addend .. silently
  * set_symbolic_reference silent
  * rename: point all sym-refs at the renamed branch.
  * Test all steps

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 18 Nov 2012 15:30:52 +0100

git-hierarchy (1.9) release; urgency=low

  * When describing segment, show the commits too.
  * Implement deleting a Sum.
  * is_sum function
  * is_segment function
  * segment_base function
  * list segments by Git call (not filename globbing).
  * new: git-dump-poset to dump a partial graph.
  * git-tsort: don't mix the output with log messages

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 13 Nov 2012 08:56:03 +0100

git-hierarchy (1.8) release; urgency=low

  * git-branch-exists: new global function
  * stop using my (git) abbrevs.
  * drop the (git) tools non-related to "hierarchy"
  * Start some documentation.
  * Delete segments correctly -- Broken
  * Removing Symbolic refs by removing files.
  * Don't list both the bases & starts of segments.
  * Make a test tool.
  * Fix: don't ignore the failure of "git rebase"!

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 12 Nov 2012 02:07:58 +0100

git-hierarchy (1.7) release; urgency=low

  * Segment: finally a way to produce the commit HASH (of Start).
  * Fix describe segment.

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 09 Nov 2012 10:33:21 +0100

git-hierarchy (1.6) release; urgency=low

  * show progress during poset rebasing.
  * git-segment:  symbolic references: test & create them correctly.

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 09 Nov 2012 09:57:14 +0100

git-hierarchy (1.5) release; urgency=low

  * tsort: handle 0 sums/segments in a friendly way.
  * improve Usage info of git-sum.
  * git-sum: create the branche immediately
  * Accept the sha hash as segment "start".
  * fix usage string.
  * git-segment:  implement dropping
  * git-segment  document all the possible Usages.
  * git-sum: document all Usages

  [ Handling symbolic references correctly ]
  * Testing existence
  * git-segment:  don't hurry to files
  * Correctly removing the Symbolic references
  * Use for-each-ref  to check ALL (even packed) references.
  * describe: try to use -- incomplete!
  * after rebasing, update the Symbolic refs correctly.
  * Usage/help for  git-delete

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 06 Nov 2012 15:58:53 +0100

git-hierarchy (1.4) release; urgency=low

  * stop tracing the scripts.
  * Fix git-segment (to not force creating the segment branch).
  * comments & style
  * Bugfix: Zsh can somehow break out of if then ..... fi.  Prevent that.

 -- Michal Maruska <mmaruska@gmail.com>  Thu, 01 Nov 2012 11:37:34 +0100

git-hierarchy (1.3) release; urgency=low

  * When creating the segment branch, start @ the start!
  * rename to git-sum
  * git_top() returns the .git dir.
  * sum: list sums as well.
  * use SUM_DIR to hide the detail. + more GIT_DIR.
  * sumdir in tsort
  * tsort: possibly output the graph (vertices in the top. order)
  * rebase-poset: report the sum/segment which failed during rebase.

 -- Michal Maruska <mmaruska@gmail.com>  Tue, 30 Oct 2012 11:08:53 +0100

git-hierarchy (1.2) release; urgency=low

  * fix  (create the Branch for segment)
  * Common functions in $prefix/share/git-hierarchy/functions.sh
  * Option to show all segments.

 -- Michal Maruska <mmaruska@gmail.com>  Mon, 15 Oct 2012 22:13:46 +0200

git-hierarchy (1.1) release; urgency=low

  * fix debian Conflict
  * don't use (git) abbrevs
  * New, top level (rebasing) tool
  * Fix once again  mktemp --tmpdir
  * optionally keep Graph temp file
  * allow basing on remote heads

 -- Michal Maruska <mmaruska@gmail.com>  Sun, 14 Oct 2012 02:44:23 +0200

git-hierarchy (1.0) release; urgency=low

  * Initial import (from mmc-shell)

 -- Michal Maruska <mmaruska@gmail.com>  Fri, 12 Oct 2012 02:02:04 +0200
