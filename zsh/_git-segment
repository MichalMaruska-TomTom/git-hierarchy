#compdef git-segment
#description manage Segments of a git-hierarchy
# :completion::complete:git-segment:argument-1:git-branches


_git-segment() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    # some options exclude others.
    # -u -> the arguments must be
    # exclude '(-r --restart)'

     _arguments -s -C \
	{-h,--help}'[help]'  \
	{-s,--short}'[short]'  \
	\
	'(-r --restart)'{-p,--diff}'[diff]:segment:_git-segment-name' \
	\
	{-u,--update}'[update]:segment:_git-segment-name' \
	{-b,--rebase}'[git-rebase immediately]' \
	\
	{-r,--restart}'[change Start]:segment:_git-segment-name' \
	\
	{-D,--prune}'[Segment to drop]:segment:_git-segment-name' \
	{-d,--delete}'[Segment to drop]:segment:_git-segment-name' \
	': :->git_segment_name' \
	': :->branch' \
	': :->branch-or-tree-ish-or-file' \
	': :->branch-or-tree-ish-or-file' \
    && return 0
     # No, I want to continue!

     # if NO option is used (only -c) -> define
     # if (( words[(b:CURRENT-1:I)--cd] ))
     # now add arguments:
     if false; then
     _arguments -s -C \
	': :->git_segment_name' \
	': :->branch' \
	': :->branch-or-tree-ish-or-file' \
	': :->branch-or-tree-ish-or-file'

     fi
     # now see if one of  ...... is present.


     # if one -> info
     # if more -> we are DEFINING.

    # base ... from git branches remotes included (segments & sums prefered?).
    # start
    # head
    case $state in
	git_segment_name)
	    _git-segment-name
	    ;;
	branch)
	    # __git_remote_branch_names
	    # todo: also:
	    __git_branch_names
	    ;;
	branch-or-tree-ish-or-file)
	    __git_commits_prefer_recent
	    ;;
	*)
	    ;;
    esac
}

# standard trick:
if [[ ! $words[1] = 'git' ]]
then
    words[1]=(git "-segment")
    (( CURRENT++ ))
else
    echo "already divided: $words[1] vs $words[2]">&2
fi
service=git;
_git

