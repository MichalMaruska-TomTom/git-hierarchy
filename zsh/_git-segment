#compdef git-segment
#description manage Segments of a git-hierarchy
# :completion::complete:git-segment:argument-1:git-branches


_git-segment() {
    local curcontext="$curcontext"
    # we call "_arguments -R"  which will set the following:
    # .... Return status 300 instead of zero when a $state is to be
    local context state state_descr line
    typeset -A opt_args

    # some options exclude others.
    # -u excludes  '(-r --restart)'

    # but here I can exclude more:
    local -a command_options

    command_options=(
	{-s,--short}'[short]'
    )

    local -a update_cmd_spec
    update_cmd_spec=({-u,--update}'[update]:segment:_git-segment-name')
    local -a restart_cmd
    restart_cmd=({-r,--restart}'[change Start]:segment:_git-segment-name')

    # how to query if one of those is present?
    local -a specific_options
    # math context?
    # fixme: not the previous one, ANY
    if (( words[(I)-(p|-diff)] ))
    then
	specific_options=()
    elif (( words[(I)-(d|-delete)] ))
    then
	 specific_options=()
	 # what?
	 # i ... Like 'r', but gives the index of the match instead; this may not be
	 # I .. gives the index of the last match, or all possible
	 # On failure substitutes 0

	 # b:-1:
	 # b:CURRENT-1:
    elif (( words[(I)-(u|-update)] ))
    then
	# mmc!
	specific_options=( $update_cmd_spec )
	# does this append?
	specific_options+=(
	    {-b,--rebase}'[git-rebase immediately]'
	    ': :->branch'
	)
    elif (( words[(I)-(r|-restart)] ))
    then
	specific_options=( $restart_cmd )
	specific_options+=(
	    # {-b,--rebase}'[git-rebase immediately]'
	    # is this valid?
	    ': :->branch-or-tree-ish-or-file'
	)
    else
	specific_options=(
	    ': :->git_segment_name'
	    ': :->branch'
	    ': :->branch-or-tree-ish-or-file'
	    ': :->branch-or-tree-ish-or-file'
	)
    fi

    command_options+=(
	{-p,--diff}'[diff]:segment:_git-segment-name'
	$restart_cmd
	#
	$update_cmd_spec

	{-D,--prune}'[Segment to drop]:segment:_git-segment-name'
	{-d,--delete}'[Segment to drop]:segment:_git-segment-name'

	{-s,--short}'[short]'
    )

    # -S ... Do not complete options after a '--' appearing on the line,
    # -C ... Modify the curcontext parameter for an action of the form
    # -R  ... to treat  the ->XX actions: exit status 300
    # -s ?
    # :  ?
    _arguments -R -S -C : \
	{-h,--help}'[help]'  \
	$command_options \
	$specific_options \
	&& return 0

    # if one -> info
    # if more -> we are DEFINING.

    # base ... from git branches remotes included (segments & sums prefered?).
    # start
    # head
    case $state in
	git_segment_name)
	    _git-segment-name
	    ;;
	branch)
	    # __git_remote_branch_names
	    # todo: also:
	    __git_branch_names
	    ;;

	branch-or-tree-ish-or-file)
	    __git_commits_prefer_recent
	    ;;
	*)
	    ;;
    esac
    return 0
}

# standard trick:
if [[ ! $words[1] = 'git' ]]
then
    words[1]=(git "-segment")
    (( CURRENT++ ))
else
    echo "already divided: $words[1] vs $words[2]">&2
fi
service=git;
_git
