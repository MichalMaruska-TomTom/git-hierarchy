#!/bin/zsh -feu

# Given 2 dumps of segments, produced by ../bin/git-dump-refs
# compare the content of same-name-segment.

# runs diff(1) by field patch-id ... and shows the related commit-id message.


GAWK_FILE="/usr/share/git-hierarchy/dump-segment"

show_commit()
{
    #  commit dir
    cd $2
    git show --oneline -s $1
}

usage()
{
    cat <<EOF
print "usage: ${0##*/} [+-v] [--] ARGS..."

-v verbose
EOF
}

verbose=n
while getopts :hv OPT; do
    case $OPT in
        h)
            usage;exit 0
            ;;
        v|+v)
            verbose=y
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1


if [[ $# -lt 3 ]]; then
    usage >&2
    exit 1
fi

name=$1
dump=$2
dump2=$3

# given the output of `git-dump-refs', extract the patch-ids ... not the commit numbers.
extract_segment_patchids()
{
    readonly name=$1
    readonly dump_file=$2
    gawk -v requested="refs/heads/$name" -f $GAWK_FILE < $dump_file | cut -f 1 -d ' '
}

find_commit_of_patchid()
{
    readonly commit=$1
    readonly dump_file=$2

    grep $commit $dump_file| cut -f 2 -d ' '
}



(if [ $verbose = y ]; then set -x;fi; diff <(extract_segment_patchids $name $dump) \
                                           <(extract_segment_patchids $name $dump2)) |
    while read line; do
        if [[ $line[1] = "<"  ]]
        then
            commit=$(find_commit_of_patchid ${line#< } $dump)
            show_commit $commit $(dirname $dump)
        elif [[ $line[1] = ">"  ]]
        then
            commit=$(find_commit_of_patchid ${line#> } $dump2)
            show_commit $commit $(dirname $dump2)
        else
            # 0a1,2
            echo "ignoring $line" >&2
        fi
    done
