#!/bin/zsh -feu

zmodload zsh/regex

source /usr/share/mmc-shell/git-functions.sh
source /usr/share/mmc-shell/mmc-functions.sh
colors
source /usr/share/git-hierarchy/functions.sh

hierarchy_branch="_hierarchy"

usage()
{
    cat <<EOF
usage: ${0##*/} [+-hn] [-t TAG] | [-b]

-n   ... dump only
-c  ... check only
-f ... force -- discard old version
-t TAG
-b from $hierarchy_branch

-l list all remote "$hierarchy_branch" branches

-v verbose
******************
Create segments/sums following hierarchy on $hierarchy_branch

EOF
}



# todo: share with ./git-store-hierarchy
FILENAME=hierarchy
tmpfile=$(mktemp -t hierarchy-dump.XXX)
trap 'rm -vf $tmpfile' EXIT
REMOTE="heads"

verbose=no
check_only=no
cat_only=no
# overwrite:
force=no

while getopts :cfhlnt:v OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        b)
            from_branch=yes
            cat_git_file_from_commit $hierarchy_branch $FILENAME > $tmpfile
            ;;
        c)
            check_only=yes
            ;;
        f)
            # maybe only forward?
            force=yes
            ;;
        l)
            echo "let's find possible branches:"
            foreach remote ( $(git remote ) ) {
                if git rev-parse remotes/$remote/$hierarchy_branch >/dev/null;
                then
                    echo "$remote/$hierarchy_branch !"
                fi
            }
            exit 0
            ;;
        n|+n)
            cat_only=yes
            ;;
        t)
            # extract from a tag:
            TAG=$OPTARG
            git tag --verify $TAG &>/dev/null

            (set -x
             git tag --list --format="%(contents)" $TAG | sed -n -e '/BEGIN PGP/q;p' > $tmpfile
             # git tag --list --format="%(subject)" $TAG > $FILENAME
            )
            ;;
        v)
            verbose=yes
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage>&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1



# First get it into a file
# from tag, from branch ...
#
if [[ $cat_only = yes ]];
then
    # from mmc-shell
    cat $tmpfile
    rm -f $tmpfile
    exit 0
fi

error()
{
    cecho red "$@" >&2
}

correct()
{
    cecho green "$@" >&2
}


check_segment()
{
    local -r segment=$1
    local -r base=$2
    local -r start=$3
    local -r head=$4

    if ! is_segment $segment
    then
        error "segment $segment does not exist at all"
        return 1
    fi
    # BASE
    if [[ $(segment_base $segment) != $base ]]
    then
        error "divergence: base of $segment:\n\tis: $(segment_base $segment)\n\tshould be: $base"
        return 1
    fi

    # START
    if [[ $(segment_start $segment) != $start ]]
    then
        error "divergence: START of $segment is:\n\t$(segment_start $segment)\n\tshould be $start"
        return 1
    fi

    # HEAD
    if [[ $(commit_id $segment) != $sha ]]
    then
        error "divergence: the HEAD of $segment is:\tis: $(commit_id $segment)\n\tshould be $sha"
        return 1
    fi

    correct "segment $segment is identical"
    return 0
}

# Given the line "segment NAME SHA BASE START"
reconstruct_segment()
{
    local -r segment=$1
    local -r base=$2
    local -r start=$3
    local -r head=$4
    LOG_STEP "segment $segment"

    local exists=no
    if [[ $check_only = "yes"  ]]
    then
        check_segment $@
        return $?
    elif is_segment $segment
    then
        error "we already have segment $segment"
        check_segment $@

        if [[ $? = 0 ]]
        then
            return 0
        else
            git log -1 --oneline $segment
            git-segment $segment
            if [[ $force = no ]]; then
                return 1
            fi
            exists=yes
        fi
    fi

    # so either force, or does not exist.
    [[ $verbose = yes ]] && LOG_STEP "check that base exists"

    if ! git rev-parse $base -- >/dev/null
    then
        warn "don't have the base of segment $segment: $base"
        exit 1
    fi

    if ! git log -1 $start >/dev/null
    then
        error "cannot use the provided START: $start"
        # the start is the remote base!
        # b/c if I made a new sum, ....!
    fi

    (
        if [[ $verbose = yes ]]; then
            set -x
        fi
        # this can still fail, if already exists!
        # and  a sum is on top of it.
        if [[ $exists = yes ]]
        then
            git branch --force $segment $head
            git-segment -r $segment $start
            git-segment -u $segment $base
        else
            git-segment $segment $base $start $head
        fi
     )
}

check_sum()
{
    local -r sum=$1
    local -r sha=$2
    # shift
    local -a _summands=( ${(P)3} )


    if ! is_sum $sum
    then
        error "sum $sum does not exist at all"
        return 1
    fi

    if [[ $(commit_id $sum) != $sha ]]
    then
        error "divergence: the HEAD of $sum:\n\tis: $(commit_id $sum)\n\tshould be: $sha"
        return 1
    fi

    # summands
    local -a current_summands=( $(summands_of $sum) )
    # compare 2 arrays:
    # delete  from one array:   :|
    _minus=${current_summands:|_summands}
    _plus=${_summands:|current_summands}

    if ! [[ $#_minus = 0 && $#_plus = 0 ]]
    then
        error "difference in summand list of $sum:\nnow:\t$current_summands[@]\n\t$_summands[*]"
        return 1
    fi

    correct "sum $sum is identical"
    return 0
}

reconstruct_sum()
{
    local -r sum=$1
    local -r sha=$2
    # shift
    local -a _summands=( ${(P)3} )
    LOG_STEP "sum $sum"
    # echo  @ $sha, from ${_summands[@]}"

    if [[ $check_only = "yes"  ]]
    then
        check_sum $@
        return $?
    elif is_sum $sum
    then
        warn "we already have SUM $sum"
        check_sum $@

        if [[ $? = 0 ]]
        then
            return 0
        else
            git-sum $sum
            if [[ $force = no ]]; then
                return 1
            fi
            exists=yes
        fi
    fi

    # check all the summands exist
    # todo:
    (
        set -x
        # fixme: a bit dangerous! what if I already have it?
        cmd=echo
        git-sum -r -s $sha $sum $summands
        # maybe necessary:
        git branch --force $sum $sha
    )
}


# Maybe this should invoke a tool which `only' creates?
tac $tmpfile| \
    while read line; do
        # echo ">$line<"
        # Given the line          "segment     NAME                      SHA     BASE  START"
        if [[ $line -regex-match '^segment ([[:graph:]]+)[[:space:]]+([[:graph:]]+)[[:space:]]+([[:graph:]]+)[[:space:]]+([[:graph:]]+)$' ]]
        then
            # variables:
            segment=$match[1]
            sha=$match[2]
            base=$match[3]
            start=$match[4]
            reconstruct_segment $segment $base $start $sha || [[ $check_only = yes ]]

            # Given the line        "sum               NAME                      SHA    summands"
        elif [[ $line -regex-match '^sum[[:space:]]+([[:graph:]]+)[[:space:]]+([[:graph:]]+)(.*)$' ]]
        then
            sum=$match[1]
            sha=$match[2]
            # read the summands:
            rest=$match[3]
            typeset -a summands=()
            # echo "processing the rest: $rest"
            # greedy:
            while [[ "$rest" -regex-match '^[[:space:]]+([[:graph:]]+)(.*)$' ]]
            do
                # echo "adding $match[1]"
                summands+=($match[1])
                rest=($match[2])
            done

            # print "summands: $summands[@]"
            reconstruct_sum $sum $sha "summands" || [[ $check_only = yes ]]
        fi
    done
