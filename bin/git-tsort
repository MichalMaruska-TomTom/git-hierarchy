#! /usr/bin/zsh -feu

# Generate list of my known branches (sums & segments)
# and output them in topological order.

# note this generates the graph "globally", not by search.

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

keep_graph_file="n"
just_graph=n
dump_format=tsort
debug=n
typeset -a draw_options

usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-k]  [-g] [-x] [--]
-x display using  dot(1)
-k keep the generated file (for tsort(1))

-g don\'t dump the topological order on stdout.
EOF
    unsetopt POSIX_ARGZERO
}

while getopts :kgxd OPT; do
segment_format=tsort
    case $OPT in
        k|+k)
            keep_graph_file=y
            draw_options+=(-k)
            ;;
        g)
            just_graph=y
            ;;
        d)
            debug=y
            ;;
        x)
            dump_format=dot
            ;;
        *)
            usage
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [ $# -gt 0 ]; then
    echo "unexpected argument(s)" >&2
    usage >&2
    exit 1
fi

# Get a temp file:
GRAPH=$(mktemp --tmpdir=${TEMP-/run/tmp/} graph.XXX)
extern_color=pink

# segments ... look at bases.
setopt NULL_GLOB


# why temp file?
# tsort doesn't need it (- is ok)
# my ../../mmc-shell/bin/draw-tsort-graph
# this could be tsort-ed. But this ^ sort it too.

dump_whole_graph $segment_format > $GRAPH

if [ $keep_graph_file = y ]; then
    echo "graph left in: $GRAPH" >&2
fi

if [ $dump_format = dot ]; then
    draw-tsort-graph $draw_options -F png $GRAPH | display -
    #dot -Tpng  $GRAPH
    #rm $GRAPH
elif [ $just_graph = y ]; then
    # sort:

    # while read
    for  a in $(tsort $GRAPH)
    do
        cecho green $a
        grep -e "^$a" $GRAPH || true
    done
else
    tsort $GRAPH | tac
fi


if [ $keep_graph_file != y ]; then
    rm -f $GRAPH
fi
