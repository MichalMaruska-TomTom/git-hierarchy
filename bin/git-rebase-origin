#!/bin/zsh -feu

GIT_P4=~/git/git-core/git-p4.py

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)
cd "$(git rev-parse --show-toplevel)"


# I could even 'git fetch'
usage()
{
    cat <<EOF
usage: ${0##*/} [+-hfv] [--] [top-ref]
-f  do NOT git fetch origin
-v  verbose
-d  dry
[top-ref]  what to rebase, by default the current branch.

*******
Discover which remote branches to fetch, then rebase ....
update the Bases by \`fetch' and rebase.
EOF

}

# debug=n
fetch=yes
dry_only=no

# if only debian/changelog -> stash
while getopts :hi:fvd OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        d)
            dry_only=yes
            ;;
        i)
            known_divergent+=($OPTARG)
            ;;
        f)
            fetch=no
            ;;
        v)
            debug=y
            ;;
        *)
            usage
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1
# set -x
if [ $# -lt 1 ]; then
    # by default the current-branch-poset
    # by default look at the base ... what it follows:
    top=$(current_branch_name)
    cecho blue -n "taking the current "; cecho green -n "$top "; cecho blue "as top"
elif [ $# = 1 ]; then
    top=$1
else
    die "wrong number of parameters"
fi

# todo: git-walk-down and solve the baseS. move them,
typeset -a bases
#todo: have to
git checkout HEAD

# note: grep & drop = sed -n

if [[ ${#known_divergent} -gt 0 ]]
then
    ignore_options=("-i")
    ignore_options=(${ignore_options:^^known_divergent})
else
    ignore_options=()
fi

bases=($(git-walk-down $ignore_options -r $top|- grep segment| cut -f 3))
if [[ $? != 0 ]]
then
    die "cannot continue -- git-walk-down failed"
fi

DEBUG "bases: $bases"


typeset -a fetched
fetched=()
# keys:  $remote:$remote_branch

# uses $dry_only, $fetch, $GIT_P4
function rebase_one()
{
    local base=$1
    local remote
    local git_fetch=$fetch
    local REMOTE_BRANCH

    if expr match $base 'refs/remotes/p4/' >/dev/null ;
    then
        remote=${base#refs/remotes/p4/}
        REMOTE_BRANCH=${remote}
        if [ $dry_only = no ]; then
            # readonly
            set -x
            local -r old=$(git rev-parse ${base#refs/})
            $GIT_P4 sync --branch $REMOTE_BRANCH --git-dir $(git rev-parse --git-common-dir)
            git log --oneline $old..${base#refs/}
        fi
        git_fetch=no
    elif expr match $base 'refs/remotes/' >/dev/null ;
    then
        remote=${base#refs/remotes/}
        remote_branch=${remote#*/}
        remote=${remote%/*}
        echo "the base is remote: $remote/$remote_branch"

    else
        if ! expr match $base 'refs/heads/' >/dev/null
        then #fixme:
            this_branch=$base
            base=refs/heads/$base
        fi

        remote_branch=$(git for-each-ref --format='%(upstream:short)' $base)
        if [[ -z $remote_branch ]]; then git_fetch=no; fi

        echo "upstream: $remote_branch"
        remote=${remote_branch%/*}
        remote_branch=${remote_branch#*/}
    fi

    if [ $git_fetch = yes ]; then
        key="$remote:$remote_branch"

        if [[ $fetched[(i)${(q)key}] -le ${#fetched} ]]
        then
            INFO "already fetched from $remote $remote_branch"
        else
            fetched+=($key)
            INFO "Fetching upstream to $base: $remote"
            set -x
            if [ $dry_only = no ]; then
                local old_head=$(git rev-parse $remote/$remote_branch)
                git fetch $remote $remote_branch
                git log --oneline $old_head..FETCH_HEAD

                # funny:
                # $(basename $base)
                git branch -f ${base#refs/heads/} $remote/$remote_branch
            else
                echo "would fetch from $remote $remote_branch"
            fi
        fi
    fi # manual! todo: understand what error scenarios are possible!

    # sometimes I point the the segment base directly at remote, correct?
    if [ $dry_only = no ]; then
        if [ -n "${this_branch-}" ]; then
            set_branch_to $this_branch $remote/$remote_branch
        fi
    fi
}


foreach base ($bases)
{
    rebase_one $base
}

if [ $dry_only = no ]; then
    if [[ ${#known_divergent} -gt 0 ]]
    then
        ignore_options=("-i")
        ignore_options=(${ignore_options:^^known_divergent})
    else
        ignore_options=()
    fi
    git-rebase-poset $ignore_options $top
fi
