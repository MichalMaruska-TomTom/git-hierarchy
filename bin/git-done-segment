#!/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)


usage()
{

    cat <<EOF
usage: ${0##*/} [+-ha] [--] ARGS...

-a   ... abort
****
record the end of segment-rebasing.
EOF
    }


TEMP="temp-segment"
abort_rebase=n
while getopts :ha OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
        ;;
        a|+a)
            abort_rebase=y
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [ $# -gt 0 ]; then
    readonly branch=$1
    shift
else
    readonly branch=$(marked_segment)
fi
# todo: double-check it's a segment!

if [ $# -gt 0 ]; then
    TEMP=$1
    shift
fi

if [ $# -gt 0 ]; then
    echo "unexpected arguments $@..." >&2
    usage >&2
    exit 1
fi

if [ -z $branch ];
then
    echo "no marked segment" >&2
    exit 0
fi

if [[ $abort_rebase = n ]]
then
    git branch --force $branch $TEMP
    git checkout $branch

    # This is also the content of the rebase-complete hook!
    # although there we need to recover the "state", so `git-reset-segment'
    # and clean it after.
    #    git-segment --restart $branch $onto
    git-reset-segment $branch
    git branch --delete $TEMP
else
    FILE=$GIT_DIR/.segment-cherry-pick
    segment=$(cat $FILE)
    echo -n "was rebasing $segment"

    git cherry-pick --abort
    rm -vf $FILE
    echo "remaining on temp branch possibly?" >&2
    set -x
    git switch $segment
fi
