#!/bin/zsh -feu

source /usr/share/mmc-shell/git-functions.sh

#
readonly BRANCH="_hierarchy"
readonly FILENAME=hierarchy
readonly MODE=100644

usage()
{
    cat <<EOF
usage: ${0##*/} [+-h] [-k] [-c] [-t tag] [--] REF ...

********
Invoke "git-graph -r $@" and store the output ...

with REF given, walk down that. Otherwise the whole graph

-c in fact store it as a new commit on $BRANCH
-k keep the temporary file with dumped info
-t or in a tag ... on the commit of first REF

otherwise just output.
EOF
}

do_commit=no
do_tag=no
keep=no

while getopts :chkt:v OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        c)
            do_commit="yes"
            ;;
        k)
            keep=yes
            ;;
        t)
            do_tag=$OPTARG
            ;;
        v)
            verbose=yes
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

# create the content:
# ==================
tmpfile=$(mktemp -t hierarchy-dump.XXX)
# trap
echo "$tmpfile" >&2

# we use the REF when setting a tag!
if [[ $do_tag != no ]]
then
    if [[ $# = 1 ]]; then
        commit_to_tag=$1
    else
        # commit_to_tag=$(current_branch_name)
        {
            echo "when tagging, only 1 argument is needed"
            usage
        } >&2
        exit 1
    fi
fi
# is this in topological order?
git-graph -r $@ > $tmpfile

commit_single_file_on_branch()
{
    set -xe
    local -r tmpfile=$1
    local -r BRANCH=$2
    local -r commit_message=$3
    local -r blob_hash=$(git hash-object --stdin -w < $tmpfile)

    # todo: check it didn't fail.
    # check:
    # git cat-file -p $blob_hash
    # must be "blob"
    git cat-file -t $blob_hash

    # tree with 1 file:
    typeset -lr tree_hash=$(echo "$MODE blob $blob_hash\t$FILENAME"| git mktree)
    # |git update-index  --index-info

    # the parent:
    typeset -la parents=()

    if git-branch-exists $BRANCH;
    then
        parents+=(-p $BRANCH)
    fi
    commit=$(git commit-tree -m "$commit_message" $parents $tree_hash)

    git branch --force $BRANCH $commit

}


if [[ $do_commit = yes ]]
then
    commit_single_file_on_branch $tmpfile $BRANCH "new hierarchy: $@"
elif [[ $do_tag != no ]]
then
    # ensure $# = 1
    git tag $do_tag $commit_to_tag --annotate --sign --file $tmpfile
else
    cat $tmpfile
fi

[[ $keep = yes ]] || rm -f $tmpfile
