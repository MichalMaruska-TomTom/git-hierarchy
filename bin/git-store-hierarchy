#!/bin/zsh -feu

source /usr/share/mmc-shell/git-functions.sh

#
readonly BRANCH="_hierarchy"
readonly FILENAME=hierarchy
readonly MODE=100644

usage()
{
    cat <<EOF
usage: ${0##*/} [+-h] [--] ARGS...

********
Invoke "git-graph -s $@" and store the output ...
in a new commit on $BRANCH
EOF
}

do_commit=no

while getopts :ch OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        c)
            do_commit="yes"
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

# create the content:
# ==================
tmpfile=$(mktemp hierarchy-dump.XXX)
# trap
echo "$tmpfile" >&2
git-graph -r $@ > $tmpfile

commit_single_file_on_branch()
{
    set -xe
    local -r tmpfile=$1
    local -r BRANCH=$2
    local -r commit_message=$3
    local -r blob_hash=$(git hash-object --stdin -w < $tmpfile)

    # todo: check it didn't fail.
    # check:
    # git cat-file -p $blob_hash
    # must be "blob"
    git cat-file -t $blob_hash

    # tree with 1 file:
    typeset -lr tree_hash=$(echo "$MODE blob $blob_hash\t$FILENAME"| git mktree)
    # |git update-index  --index-info

    # the parent:
    typeset -la parents=()

    if git-branch-exists $BRANCH;
    then
        parents+=(-p $BRANCH)
    fi
    commit=$(git commit-tree -m "$commit_message" $parents $tree_hash)

    git branch --force $BRANCH $commit

}


if [[ $do_commit = yes ]]
then
    commit_single_file_on_branch $tmpfile $BRANCH "new hierarchy: $@"
else
    cat $tmpfile
fi

rm -f $tmpfile
