#! /usr/bin/zsh -feu

# Manage the Sum information:
# list ..
# add
# remove
#

usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
Usage:
${0##*/} [+-h]

${0##*/}
  list all sums

${0##*/} {name}
  show the definition -- list of summands

${0##*/} [-c] branch
  show the sum definition,
-c prune non-existings summands
  # does this make it contiguous?

${0##*/} [-r] branch new-merge-branch -drop-merge-branch ...
  modify the definition.
  -r reset: empty the definition first.
  -s start_point

  -name ... remove this ref as summand
  name | +name add.

${0##*/} [-d] branch
  drop the definition.
EOF
    unsetopt POSIX_ARGZERO
}

source /usr/share/git-hierarchy/functions.sh


# return (print) a new number for the (next) summand.
find_new_index(){
    local name=$1
    typeset -i i=1
    git for-each-ref "refs/sums/$name/" --format "%(refname)" |\
    while read ref; do
        if [ ${ref##*/} -ge $i ]; then
            ((i=${ref##*/}+1))
        fi
    done
    echo $i
}

# no renumbering (of summands)
remove_from_sum() {
    local sum=$1
    local summand=$2
    git for-each-ref "refs/sums/$name/" --format "%(refname)" |\
    ( while read ref;
        do
        if [ "$(dump_ref_without_ref $ref)" = "$summand" ];
        then
            #remove it:
            drop_symbolic_ref $ref
        fi
        done)
}

add_to_sum()
{
    local sum=$1
    local addend=$2
    local index=$3

    set -x
    cecho yellow "adding to sum $sum: $addend, as $index"
    local ref=refs/sums/$sum/$index

    set_symbolic_reference $ref  "ref: $addend"
}



# print valid/existing components of the sum
show_prune_definition()
{
    local silent
    if [ $# = 2 ];then
        silent="y"
    else
        silent="n"
    fi
    local summand

    if ! test -d $(git rev-parse --git-path refs/sums/$name)
    then
        echo "$name is not a sum">&2
        exit 1
    fi

    git for-each-ref "refs/sums/$name/" --format "%(refname)" | \
    while read summand;do
        # git-branch-exists
        local ref="$(git symbolic-ref $summand)"
        local hash="$(git show-ref $summand)"
        if [ -n "$hash" ]; then
            local prefix=""
            if [[ $number_them = y ]]; then
                prefix="${summand#refs/sums/$name/}\t"
            fi
            echo "$prefix$ref"
        else
            if [ $silent != "y" ]; then
                echo NON-existant $ref = $summand
                # exit 2
            fi
        fi
    done
}

if [ $# = 0 ];
then
    # avoid bug! (dependency on NULL_GLOB.)
    { list_sums } always { TRY_BLOCK_ERROR=0 }
    exit 0;
fi


reset="n"
correct="n"
delete=n
number_them=n
start_point="HEAD"

while getopts :cdhnrs: OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        r)
            reset="y"
            ;;
        n)
            number_them=y
            ;;
        s)
            start_point=$OPTARG
            ;;
        c)
            correct="y"
            ;;
        d)
            delete="y"
            ;;
        *)
            usage
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

if [ $# -lt 1 ]; then
    usage
    exit -1
fi

name=${1#refs/heads/}
shift

if [[ $delete = y ]];
then
    delete_sum_definition $name
    git branch -d $name
    exit 0
elif [[ $reset = "y" ]];
then
    delete_sum_definition $name
    # exit 0

elif [ $# = 0 ]; then
    if [ $correct = y ]; then
        TEMP=$(mktemp -t)
        show_prune_definition $name "silent" > $TEMP
        # todo!
        # delete those that don't exist.
    else
        show_prune_definition $name
    fi
    exit 0
fi



# Create the branch. todo: might hint at where!
git rev-parse heads/$name -- || git branch $name $start_point

# now creation:
# find minimal number:
# mmc: do we guarantee that indices form an interval? continous?
index=$(find_new_index $name)
readonly summands=($(summands_of $name))

for br in "$@"
do
    case "$br" in
        -*)
            br=${br#-}
            # I need to `expand' to `Full' ref!
            br=$(git-expand-ref $br)

            # remove:
            # find its index!
            cecho red $br
            remove_from_sum $name $br
            ;;
        +* | *)
            br=${br#+}
            cecho green "addend $br"
            br=$(git-expand-ref $br)

            if [[ ${summands[(i)$br]} -le ${#summands} ]]; then
                WARN "already summand, skipping"
                # short-cut:
                continue
            else
                # add:
                add_to_sum $name $br $index
                ((index=index+1))
            fi
            ;;
    esac

    # refresh:
    git-sum-branches $name
done
