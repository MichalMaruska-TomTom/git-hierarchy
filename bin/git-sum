#! /usr/bin/zsh -feu


usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
Usage:
${0##*/} [+-h]

Manage the Sum information:

${0##*/}
  list all sums

${0##*/} [-c] {name}
  show the definition -- list of summands
  -c ... prune non-existings summands
  # does this make it contiguous?

${0##*/} [-s start] [-r] branch new-merge-branch -drop-merge-branch ...
  modify the definition -- stepwise?
  -r reset: empty the definition first.
  -s start_point

  -name ... remove this ref as summand
  name | +name add.


${0##*/} [-d] branch
  drop the definition.
EOF
    unsetopt POSIX_ARGZERO
}

source /usr/share/git-hierarchy/functions.sh


# return (print) a new number for the (next) summand.
find_new_index(){
    local name=$1
    typeset -li min_non_existing=1
    git for-each-ref "refs/sums/$name/" --format "%(refname)" |\
    while read ref; do
        if [ ${ref##*/} -ge $min_non_existing ]; then
            ((min_non_existing=${ref##*/}+1))
        fi
    done
    echo $min_non_existing
}

# no renumbering (of summands)
# @sum must be name
# @summand must be full refs/heads/xxx ?
remove_from_sum() {
    local sum=$1
    local summand=$2
    git for-each-ref "refs/sums/$name/" --format "%(refname)" |\
    ( while read ref;
        do
        if [ "$(dump_ref_without_ref $ref)" = "$summand" ];
        then
            #remove it:
            drop_symbolic_ref $ref
        fi
        done)
}

# addend (summand) should be full ref.
add_to_sum()
{
    local sum=$1
    local addend=$2
    local index=$3

    [[ $verbose = y ]] &&
        INFO "adding to sum $sum: $addend, as $index"
    local ref=refs/sums/$sum/$index

    set_symbolic_reference $ref  "ref: $addend"
}

# print valid/existing components of the sum
show_prune_definition()
{
    local name=$1
    local silent
    if [ $# = 2 ];then
        silent="y"
    else
        silent="n"
    fi
    local summand

    if ! test -d $(git rev-parse --git-path refs/sums/$name)
    then
        echo "$name is not a sum">&2
        exit 1
    fi

    git for-each-ref "refs/sums/$name/" --format "%(refname)" | \
    while read summand;do
        # git-branch-exists
        local ref="$(git symbolic-ref $summand)"
        local hash="$(git show-ref $summand)"
        if [ -n "$hash" ]; then
            local prefix=""
            if [[ $number_them = y ]]; then
                prefix="${summand#refs/sums/$name/}\t"
            fi
            echo "$prefix$ref"
        else
            if [ $silent != "y" ]; then
                echo NON-existant $ref = $summand
                # exit 2
            fi
        fi
    done
}

if [ $# = 0 ];
then
    # avoid bug! (dependency on NULL_GLOB.)
    { list_sums } always { TRY_BLOCK_ERROR=0 }
    exit 0;
fi


reset="n"
prune="n"
delete=n
number_them=n
start_point="HEAD"
verbose=no

while getopts :cdhnrs:v OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        r)
            reset="y"
            ;;
        n)
            number_them=y
            ;;
        s)
            start_point=$OPTARG
            ;;
        c)
            prune="y"
            ;;
        d)
            delete="y"
            ;;
        v)
            verbose=y
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage>&2
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

if [ $# -lt 1 ]; then
    echo "missing arguments">&2
    usage
    exit -1
fi


name=$1
name=${name#refs/}
name=${name#heads/}
shift

if [[ $delete = y ]];
then
    delete_sum_definition $name
    git branch -d $name
    exit 0
elif [[ $reset = "y" ]];
then
    delete_sum_definition $name

elif [ $# = 0 ]; then

    if [ $prune = y ]; then
        TEMP=$(mktemp -t)
        show_prune_definition $name "silent" > $TEMP
        # todo!
        # delete those that don't exist.
    else
        show_prune_definition $name
    fi
    exit 0
fi


new_defition=no
# Create the branch. todo: might hint at where!
git rev-parse heads/$name -- &>/dev/null ||
    {
        new_defition=yes
        git branch $name $start_point
    }

# now creation:
# find minimal number:
# mmc: do we guarantee that indices form an interval? continous?
index=$(find_new_index $name)
readonly summands=($(summands_of $name))

# new_summand
for branch in "$@"
do
    # do I need to expand it?
    case "$branch" in
        -*)
            branch=${branch#-}
            # I need to `expand' to `Full' ref!
            branch=$(git-expand-ref $branch)

            # remove:
            # find its index!
            cecho red $branch
            remove_from_sum $name $branch
            ;;
        +* | *)
            branch=${branch#+}
            cecho green "addend $branch"
            branch=$(git-expand-ref $branch)

            if [[ ${summands[(i)$branch]} -le ${#summands} ]]; then
                WARN "already summand, skipping"
                # short-cut:
                continue
            else
                # add:
                add_to_sum $name $branch $index
                ((index=index+1))
            fi
            ;;
    esac
    # refresh:
    # or if it didn't exist previously!
    if [[ $reset != "y" && $new_defition = no ]]; then
        git-sum-branches $name
    fi
done

# can we do it only now?
if [[ $reset = "y" || $new_defition = yes ]]; then
    git-sum-branches $name
fi
