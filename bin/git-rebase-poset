#! /usr/bin/zsh -feu

# this tool invokes linearily (in sequence) rebasing operations (or merging),
# in future possibly "git fetch".
source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-h] [-d] [--]  [sum|segment] ...
-d debug
EOF
    unsetopt POSIX_ARGZERO
}

DEBUG=n
dry_only=n

while getopts :hdn OPT; do
    case $OPT in
        d) DEBUG=y
           ;;
        n)
            dry_only=y
            ;;
        h|+h)
            usage
            exit
            ;;
        *)
            usage
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1


# check, that no other rebase in progress
if [ -e $GIT_DIR/.rebasing-segment ]; then
    cecho red "Must first finish rebasing segment " \
        "$(cat $GIT_DIR/.rebasing-segment)"
    exit -1
fi



set +u
. /usr/lib/git-core/git-sh-setup
set -u

STASHED=no
## possibly stash:
# sets the variable STASHED
stash_if_non_clean()
{
    if ! require_clean_work_tree $1 "$(gettext "Please commit or stash them.")"
    then
        local cmd=""
        # todo: orange:
        cecho yellow "stashing for you..."
        eval $cmd git stash save $1
        STASHED=yes
    fi
}

stash_if_non_clean "git-rebase-poset"


typeset -a WHAT_TO_REBASE

if [ $# -gt 0 ]; then
    test "$DEBUG" = y && {echo -n "... down from ";cecho cyan "$1"} >&2
    WHAT_TO_REBASE=($(git-walk-down -g $1))
else
    WHAT_TO_REBASE=($(git-tsort))
fi


typeset -a GIT_DEBUG_OPTIONS
GIT_DEBUG_OPTIONS=()

test "$DEBUG" = y && GIT_DEBUG_OPTIONS+=(-d)
test "$DEBUG" = n && GIT_DEBUG_OPTIONS+=(-q)
#test "$SILENT" = y &&

foreach ref ($WHAT_TO_REBASE)
{
        # todo: create a tag, so that if `git-rebase' fails
        # at least I see the segment (in gitk).
        #
    test "$DEBUG" = y && cecho green "rebasing $ref"

    if [ $dry_only = y ];
    then
        echo "git-rebase-ref $ref"
    else
        if ! git-rebase-ref $GIT_DEBUG_OPTIONS $ref;
        then
            # todo: save continuation!
            #problem=$?
            problem=1
            cecho red "Failure on $ref: $?"
            # todo: list the path from .... poset root to this one
            exit $problem
        fi
    fi
}

if [ $STASHED != no ]
then
    git stash pop
fi
