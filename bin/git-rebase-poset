#! /usr/bin/zsh -feu

# this tool invokes linearily (in sequence) rebasing operations (or merging),
# in future possibly "git fetch".

# IOW: iterates in topological order over
#         segments
#         sums.

source /usr/share/mmc-shell/mmc-functions.sh
check_getopt

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)
cd "$(git rev-parse --show-toplevel)"

usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-h] [-d] [-i ref] [-n] [--]  [sum|segment] ...
--debug -d debug

--dry -n .. dry


--ignore -i ... ignore misalignment

--skip  -s   old-name
--replace -t new-name
Replace old-name as summands/segment-bases with new-name.

--clone -c prefix
Create a clone hierarchy, rebasing at the same time.
EOF
    unsetopt POSIX_ARGZERO
}

clone_hierarchy=no
debug=n
dry_only=n
dry_option=()
skip_over=""

#
typeset -a excluded
excluded=()

cmd_options=$(getopt --name $0 --shell bash \
        --longoptions clone,debug,exclude,ignore,dry,skip,replace,help \
        --options     :c:dhi:ns:t:x: \
        -- "$@") || { usage && exit 1 }

eval set -- "$cmd_options"
while (( $# > 0 )); do
    case $1 in
        --debug | -d) debug=y
           ;;
        -i | --ignore)
            shift
            known_divergent+=($1)
            ;;
        -n | --dry )
            dry_only=y
            dry_option=(-n)
            ;;
        -x | --exclude)
            shift
            excluded+=($(expand_ref $1))
            ;;
        -c | --clone)
            clone_hierarchy=yes
            shift
            prefix=$1
            ;;
        -s | --skip)
            # ref = another_ref
            shift
            skip_over=$(expand_ref $1)
            ;;
        -t | replace )
            shift
            replacement=$(expand_ref $1)
            #"master"
            ;;
        -h| --help)
            usage
            exit
            ;;
        --)
            shift
            break
            ;;
        *)
            usage
            exit 2
    esac
    shift
done

# check, that no other rebase in progress
# check consistency:
if [ -e $GIT_DIR/.rebasing-segment ]; then
    cecho red "Must first finish rebasing segment " \
        "$(cat $GIT_DIR/.rebasing-segment)"
    exit -1
fi

if [[ $dry_only != y ]]; then
   mmc_stash_if_non_clean "git-rebase-poset"
fi


typeset -a WHAT_TO_REBASE

if [ $# -gt 0 ]; then
    test "$debug" = y && {echo -n "... down from ";cecho cyan "$1"} >&2

    if [[ ${#known_divergent} -gt 0 ]]
    then
        ignore_options=("--ignore")
        ignore_options=(${ignore_options:^^known_divergent})
    else
        ignore_options=()
    fi

    if [[ $debug = y ]]; then debug_option="--debug"; else debug_option=();  fi
    WHAT_TO_REBASE=($(git-walk-down $ignore_options $debug_option --graph $1))
    # if [[ $? != 0 ]]; then die "";fi
else
    # who checks the sums?
    WHAT_TO_REBASE=($(dump_whole_graph_tsort name))
fi

# Log in .git/
if [[ $dry_only != y ]]; then
    mark_rebase_poset $WHAT_TO_REBASE
fi

typeset -a GIT_DEBUG_OPTIONS
GIT_DEBUG_OPTIONS=()

test "$debug" = y && GIT_DEBUG_OPTIONS+=(-d)
test "$debug" = n && GIT_DEBUG_OPTIONS+=(-q)
#test "$SILENT" = y &&


log()
{
    if [[ $debug = y ]]; then
        cecho red $1 >&2
    fi
}

report()
{
        cecho blue $1 >&2
}



is_summand()
{
    local sum=$1
    local ref=$2

    typeset -a summands
    summands=( $(summands_of $sum) )
    # echo "summands: $summands"
    [[ ${summands[(i)$ref]} -le ${#summands} ]]
}

#
# @skip is a reference we want to Eliminate from the hierarchy:
# We want @replacement to play its role: either base for for some segments, or
# a summand (only removal!)
# This modifies the definition of @ref to replace @skip with @replacement
git_replace_in_hierarchy()
{
    local skip=$1
    local ref=$2
    local replacement=$3

    name=${ref#refs/heads/}

    if is_segment $name
    then
        log "$ref is segment"

        if [[ $skip == $ref ]]
        then
            log "skip over $ref"
        elif [[ $skip = $(segment_base $name) ]]
        then
            log "This $ref is affected by $skip -> $replacement graft"

            if [[ $dry_only = y ]];
            then
                report "(dry) rebase $ref on $replacement"
            else
                git-segment -u $name $replacement
            fi
        else
            log "$skip unrelated to segment $ref"
        fi
    elif is_sum $name
    then
        if is_summand $name $skip
        then
            if [[ $dry_only = y ]];
            then
                report "remove $skip from sum $ref"
            else
                git-sum $name -$skip
            fi
        fi
    fi
}

# This contains full references
# refs/heads/xx -> yyy
# or               refs/heads/yy ???
typeset -A rewritten_bases

# Create a new sum with the summands the Image under mapping $rewritten_bases()
git-clone-sum()
{
    sum=$1
    name=$2
    # Absolutely the same:
    summands=($(summands_of $sum))
    echo "$summands"
    # refs/heads/pinning refs/heads/protectme refs/heads/build refs/heads/colorize-tools
    # refs/heads/pinning refs/heads/protectme refs/heads/build refs/heads/colorize-tools
    summands=($(git-sum $sum))
    echo "$summands"

    new_summands=()
    foreach ref ($summands) {
        #if found ...
        new_summands+=$rewritten_bases[$ref]
    }
    set -x
    git-sum $name $new_summands
    #rewritten_bases[$ref]=$new_name
}

foreach ref ($WHAT_TO_REBASE)
{
    # todo: create a tag, so that if `git-rebase' fails
    # at least I see the segment (in gitk).

    # log "rebasing $ref"

    if [[ -n $skip_over ]]
    then
        git_replace_in_hierarchy $skip_over $ref $replacement
    elif [[ $excluded[(i)${(q)ref}] -le $#excluded ]];
    then
        continue
    fi


    if [[ $excluded[(i)${(q)ref}] -le $#excluded ]];
    then
        log "skipping over excluded $ref\n"
        continue
    fi

    # Before rebasing, create a duplicate (with rewriting bases)
    if [[ $clone_hierarchy = yes ]]; then
        # The base of such duplicate is a duplicate itself!
        branch=${ref#refs/heads/}

        if is_segment $branch; then
            new_name=$prefix$branch

            # the new base:
            base=$rewritten_bases[$(segment_base $branch)]
            # this must just copy:
            git-segment $new_name $base $(segment_start $branch) $ref
            # git-clone-segment $branch $new_name
            # todo: and now change the base!
            # git-segment -b -u $new_name
        elif is_sum $branch; then
            new_name=$prefix$branch
            git-clone-sum $branch $new_name
        else
            # some external ref
            : nada
            if [[ $ref = $skip_over ]]; then
                new_name=$replacement
            else
                new_name=$ref
            fi
        fi

        # fixme: should the new_name be full refs/.../?
        rewritten_bases[$ref]=$new_name
        echo "recording this shift: $ref -> $new_name"
        ref=$new_name
    fi

    if ! git-rebase-ref $dry_option $GIT_DEBUG_OPTIONS $ref;
    then
        # todo: save continuation!
        #problem=$?
        problem=1
        cecho red "Failure on $ref: $?"
        # todo: list the path from .... poset root to this one
        exit $problem
    fi
}

mmc_unstash_if_stashed
