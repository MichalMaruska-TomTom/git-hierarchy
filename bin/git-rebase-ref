#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

usage()
{
    print "usage: ${0##*/} [+-dh} [--] ARGS..."
}


DEBUG=n
while getopts :dh OPT; do
    case $OPT in
	d|+d)
	    DEBUG=y
	    ;;
	h|+h)
	    usage
	    exit 0
	    ;;
	*)
	    usage
	    exit 2
	    ;;
    esac
done
shift OPTIND-1
OPTIND=1

# fixme: not a ref. a BRANCH!

# rebasing this ref, upon its base.
# The base is somehow defined ...
ref=$1
branch=${ref#refs/heads/}

cmd=
# cmd=echo

if is_sum $branch; then
    # sum? ->
    # shouldn't it be  EVALed?
    if test "$DEBUG" = y; then debug="-v"; else debug="";fi
    $cmd git-sum-branches $debug -r $branch
elif is_segment $branch; then
# segment ->
    $cmd git-rebase-segment $branch
else
    test "$DEBUG" = y && echo "unknown -- leaving unchanged $ref"
fi

# note that the test && might fail, but that's not what we want to signal
# to caller.
exit 0
