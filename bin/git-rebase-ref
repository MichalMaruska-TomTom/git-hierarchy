#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

usage()
{
    print "usage: ${0##*/} [+-dh} [--] ARGS..."
}


DEBUG=n
SILENT=n
dry=n
dry_flag=()
while getopts :dhnq OPT; do
    case $OPT in
        d|+d)
            DEBUG=y
            SILENT=n
            ;;
        n)
            dry=y
            dry_flag=(-n)
            ;;
        q)
            SILENT=y
            ;;
        h|+h)
            usage
            exit 0
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage
            exit 2
            ;;
    esac
done
shift OPTIND-1
OPTIND=1

# fixme: not a ref. a BRANCH!

# rebasing this ref, upon its base.
# The base is somehow defined ...
ref=$1
name=${ref#refs/}
name=${name#heads/}

cmd=
# cmd=echo

typeset -a verbosity
verbosity=()
test "$DEBUG" = y && verbosity+=("-v")
test "$SILENT" = y && verbosity+=("-q")

if is_sum $name; then
    # shouldn't it be  EVALed?
    $cmd git-sum-branches $dry_flag $verbosity -r $name
elif is_segment $name; then
    $cmd git-rebase-segment $dry_flag $verbosity $name
else
    if test "$DEBUG" = y; then echo "unknown -- leaving unchanged $ref";fi
fi

# note that the test && might fail, but that's not what we want to signal
# to caller.
exit 0
