#!/bin/zsh -feu

# $TMP must be absolute path!

source /usr/share/git-hierarchy/functions.sh
# Uses ../bin/git-segment-patches and "git am"

VERBOSE="n"
usage()
{
    cat <<EOF
usage: ${0##*/} [+-h] [-n] [-b base] [--] {source-dir} {segment-name} [dest-dir]

Port segment between Git repos, which don't share commits.

-k ....      keep the patches directory
-n ...       don't re-define the segment, just append the commits.
-b base  ... Use this reference as a 'base' of the new segment
             By default the same-named base is expected to exist!

source-dir   ... the git-repository which contains:
segment-name ... the name
dest-repo    ... the destination git-repository; DEFAULT is cwd.
EOF
}

# todo: show the base.
# --dry?


CREATE_SEGMENT=y
keep_patches=no
while getopts :b:hkn OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        k)
            keep_patches=yes
            ;;
        n)
            CREATE_SEGMENT=no
            ;;
        b)
            SEGMENT_BASE="$OPTARG"
            # shift
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [ $# -lt 2 ]; then
    usage >&2
    exit 1
fi

SOURCE_DIR=$1
readonly SEGMENT_NAME=$2 # fixme: must be acceptable filename!

if [ $# -gt 2 ]; then
    DESTDIR=$3
    # only in this case we chdir(2), so need this:
    SOURCE_DIR=(realpath --canonicalize-existing $SOURCE_DIR)
    cd $DESTDIR
fi

clean_up()
{
    if [[ $keep_patches = "no" && -d $tempdir ]]; then
        # INFO "now remove the patches in $tempdir"
        /bin/rm --recursive $tempdir
    fi
}

readonly tempdir=$(mktemp --directory segment-patches-$SEGMENT_NAME-XXX)

if [[ $debug = y ]]; then INFO "will use $tempdir" >&2; fi
# todo: trap to remove the dir!

# on exit also?
trap 'clean_up' ZERR EXIT


# hm, so I don't do it one-by-one.
(
    cd $SOURCE_DIR
    git-segment-patches -o $tempdir $SEGMENT_NAME
)

if [[ $CREATE_SEGMENT = y ]]; then
    if git-segment $SEGMENT_NAME >& /dev/null ;
    then
        cecho green "already exists"
        exit 1
    else
        # set -x
        if [[ -z ${SEGMENT_BASE-} ]]; then
           SEGMENT_BASE=$(cd $SOURCE_DIR; echo $(segment_base $SEGMENT_NAME))
        fi

        # -n non-null --quiet
        git checkout -b $SEGMENT_NAME $SEGMENT_BASE
        # mmc: doesn't this do it?
        git-segment --checkout $SEGMENT_NAME $SEGMENT_BASE
        # I could probably do it with specifying: $SEGMENT_BASE $SEGMENT_BASE
    fi
# else  reset-the-segment?
fi

# --keep-non-patch ... drops [PATCH].
# I need to keep the "[JIRA-ISSUE]" prefix. even [PATCH]
if git am --keep $tempdir/*(n); then
    exit_status=$?
fi

exit ${exit_status-0}
