#!/bin/zsh -eu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)
roots=()
title=""

: ${GITK=gitk}

usage()
{
setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-f|l] [-v] [--]    [REF]

REF is segment or sum. By default HEAD is used.
-f  show the whole poset! (uses git-graph to get the base).
-g  the whole graph.

-v  verbose

# to be used:
# $0 mmc-segment
# will invoke gitk(1) on .... mmc-segment..base/mmc-segment?
# or even mmc-sum including all summands

EOF
unsetopt POSIX_ARGZERO
}

MAX=2000

full_poset=n  # take it full-depth, not just 1 segment/sum
all_graph=n # take all tops, not just current branch

verbose=n
while getopts :fgv OPT; do
    case $OPT in
        f|+f)
            full_poset=y
            ;;
        g)
            all_graph=y
            ;;
        v)
            verbose=y
            ;;
        *)
            usage >&2
            exit 2
    esac
done

shift $(( OPTIND - 1 ))
OPTIND=1

# Beware: for now gitk cannot be directed to start on a given commit.
# Hence it's desirable, that the `top' intended commit is near the top
# and hence the other included/positive refs should not bring in many underlying commits.

# mmc: but some tops must be given!
gitk_from_graph()
{
    local -r GRAPH=$1

    printf "gitk_from_graph %s\n" $GRAPH  >&2

    # this sets the variables: roots tops
    find_roots_and_tops $GRAPH

    if [[ $verbose = y ]];
    then
        echo "tops: $tops"
        # bug: not always is the symbolic graph *really* below the tops.... if not rebased!
        # todo: so the middle should be listed as positive too.
        echo "roots: $roots"
    fi

    # echo now prefix:
    for ((i=1; i<= ${#roots}; i++))
        {
            roots[$i]="$roots[$i]^!"
        }
    # echo now
    # "${roots[*]^@}"
    # convert:
    #    echo ${#roots}
    rm -f $GRAPH
    $GITK --title="poset" --max-count=$MAX $roots $tops
}


if [ $all_graph = y ]; then
    readonly GRAPH=$(mktemp -t gitk-graph.XXX)
    dump_whole_graph "tsort" >! $GRAPH
    gitk_from_graph $GRAPH
    exit 0
fi


#### local version:

# only 1?
if [ $# -gt 1 ]; then
    usage >&2
    exit 1
elif [ $# = 0 ]; then
    # default:
    ref_name=$(git rev-parse --symbolic-full-name "HEAD")
else
    ref_name=$1
fi
ref_name=${ref_name#refs/heads/}

if [[ $full_poset = y ]]
then
    # why only 1?
    # fixme:
    title="full down from $ref_name"

    readonly GRAPH=$(mktemp -t gitk-graph.XXX)

    git-walk-down -t $ref_name >! $GRAPH
    # dump_whole_graph "tsort"
    gitk_from_graph $GRAPH
    exit 0
fi

# set Roots & Tops:
tops=($ref_name)
if is_segment $ref_name
then
    title="segment $ref_name"
    roots=("refs/start/$ref_name^!" "refs/base/$ref_name^!")
    # base as well.
elif is_sum $ref_name;
then
     title="sum $ref_name"
     typeset -a summands
     summands=($(git-sum $ref_name))

     for ((i=1; i<= ${#summands}; i++))
         {
             roots[$i]="$summands[$i]^!"
         }
fi

set -x
exec $GITK --title=$title $roots $tops

# full_poset:
# git-walk-down mmc-focus |
