#! /usr/bin/zsh -feu
extern_color=pink

# Tools can operate in 2 modes: `set' mode, in which ALL segments & sums are collected,
# and topo-sorted by _local_ property of incidence.
#
# or the `graph' mode, in which some root(s) is given, and we walk down and get a restricted
# set of segments/sums.
#
# Display etc should be separate. These 2 methods should feed a common format of data.

# apparently I use 2 formats:  `dot' and `tsort'


# old: This is .... unmaintained.... the display part is left behind git-tsort -x.

# fixme: this does not dump the TYPE of the relationship. (sum vs segment-base)
source /usr/share/git-hierarchy/functions.sh
check_getopt

test_option=()
usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [-g | x | r | l | s] | [-f format]  [-dh] [--] {REF}

Output or Display the order of segments & sums below REF

Format:
-g --graph dump the graph (default)
-r --raw   raw format
-x --x     display the graph w/ ImageMagick
-l --log    log with --graph
-s --symbolic  symbolic ??

-f --format XX --- explicitly select (dot raw tsort)


-i --ignore   ignore broken defition
-n --notest   don't test (sum) definitions!

-d --debug    turn on Debugging

-k --keep     keep the graph file
-h  --help

REF ... top segment/sum
EOF
    unsetopt POSIX_ARGZERO
}

display_gui=n

dump_format=tsort
segment_format=$dump_format

keep_graph=n
verbose=n
debug=n
typeset -a draw_options


cmd_options=$(getopt --name $0 --shell bash \
                     --longoptions debug,x,keep-graph,ignore:,notest,raw,tsort,graph,symbolic,log,format:,help \
        --options     df::ghi:klnrstx  \
        -- "$@") || { usage && exit 1 }
eval set -- "$cmd_options"


# todo: convert to `getopt'
while (( $# > 0 )); do
    case $1 in
        -x|--x)
            display_gui=y
            dump_format=dot
            segment_format=$dump_format
            ;;
        -k|--keep-graph)
            keep_graph=y
            ;;
        -i|--ignore)
            shift
            known_divergent+=($1)
            ;;
        -n|--notest)
            test_option=(--notest)
            ;;
        -t|--tsort)
            segment_format=tsort
            dump_format=raw
            ;;
        -g|--graph)
            dump_format=tsort
            segment_format=$dump_format
            ;;
        -r|--raw)
            dump_format=raw
            segment_format=$dump_format
            ;;
        -s|--symbolic)
            dump_format=symbolic
            segment_format=$dump_format
            ;;
        -l|--log)
            segment_format=tsort
            dump_format=log
            ;;
        -f|--format)
            shift
            dump_format=$1
            segment_format=$dump_format
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -d|--debug)
            debug=y
            verbose=y
            ;;
        --)
            shift
            break
            ;;
        *)
            {
                cecho red  "bad option $1"
                usage
            } >&2
            exit 2
    esac
    shift
done


if [ $# = 0 ]; then
    # default is the current branch
    ref_name=$(git rev-parse --symbolic-full-name HEAD)
elif [ $# = 1 ]; then
    ref_name=$1
else
    {
        cecho red "too many arguments $#: $@"
        usage
    } >&2
    exit 1
fi

ref_name=$(ref_extract_name $ref_name)
GRAPH=

trap "clean" EXIT
clean()
{
    if [[ $keep_graph = n ]]; then
        test -n "$GRAPH" && rm -f $GRAPH
    fi
}

GRAPH=$(mktemp -t graph.XXX)

sum_format=$segment_format
walk_down_from $test_option $ref_name $segment_format $sum_format > $GRAPH

# cat $GRAPH

# same as git-graph:
case $dump_format in
    dot)
        draw-tsort-graph $draw_options -F png $GRAPH | display -
        ;;
    raw | symbolic)
        cat $GRAPH
        ;;
    log)
        find_roots_and_tops $GRAPH

        for ((i=1; i<= ${#roots}; i++))
            {echo $i $roots[$i];
             roots[$i]="$roots[$i]^!";
             echo $roots[$i]
            }

        git log --graph --oneline --decorate $roots $tops
        ;;
    tsort)
        tsort $GRAPH | tac
        ;;
    *)
        for  a in $(tsort $GRAPH)
        do
            cecho green $a
            grep -e "^$a" $GRAPH || :
        done

esac
