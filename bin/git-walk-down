#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

# segment_base ${segment#refs/base/}

usage()
{
    cat <<EOF
usage: ${0##*/} [+-xgh} [--]  {ref}

Output or Display the order of segments & sums below REF
-x  display the graph w/ ImageMagick
-g  dump the graph

EOF
}

# sum_bases()
display_gui=n
just_graph=n
DEBUG=n

while getopts :dghx OPT; do
    case $OPT in
	x|+x)
	    display_gui=y
	    ;;
	g|+g)
	    just_graph=y
	    ;;
	h|+h)
	    usage
	    exit 0
	    ;;
	d)
	    DEBUG=y
	    ;;
	*)
	    usage
	    exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [ $# = 0 ]; then
    usage
    exit 1
fi


root=$(git-expand-ref $1)


GRAPH=$(mktemp --tmpdir=${TEMP-/run/tmp/}  graph.XXX)


# DFS:

typeset -a nodes
nodes=($root)
typeset -a processed
while [[ ${#nodes} -ge 1  ]];
do

    this=${nodes[1]}
    processed=($this)		#  += ?
    nodes=(${nodes:|processed})# fixme: processed ?
    # take the first, and append the base(s)
    # also remove "first" if it's repeated.


    test "$DEBUG" = y && \
	cecho yellow "processing $this, remain $nodes ${#nodes}" >&2 || : ok

    name=${this#refs/heads/}
    if is_sum $name; then
	dependants=($(summands_of $name))
    elif is_segment $name; then
	dependants=($(segment_base $name))
    else
	if test "$DEBUG" = y; then
	    cecho red "stopping @ $name" >&2
	fi
	dependants=()
    fi

    # output the dependency:
    foreach dep ($dependants)
    {
	echo "$this $dep"
    } >> $GRAPH
    nodes+=($dependants)

    if test "$DEBUG" = y; then
	cecho green "iterate $nodes -- ${#nodes}" >&2
    fi
done

# trap exit
# rm $GRAPH


# echo $GRAPH
# cat $GRAPH
if [ $display_gui = y ]; then
    #set -x
    sed -e 's|refs/heads/||g;s|[/-]|_|g;s/ \+/ ->/;s/$/;/;s/mmc_//g' \
	$GRAPH |\
    draw-tsort-graph -F png | display -
    #dot -Tpng  $GRAPH
    #rm $GRAPH
elif [ $just_graph = y ]; then
    # sort:

    # while read
    for  a in $(tsort $GRAPH)
    do
	if test "$DEBUG" = y; then
	    cecho green $a
	fi
	grep -e "^$a" $GRAPH || :
    done
    rm $GRAPH

else
    tsort $GRAPH | tac
    rm $GRAPH
fi
