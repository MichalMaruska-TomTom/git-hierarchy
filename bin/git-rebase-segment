#! /usr/bin/zsh -feu

# rebase  (start...segment) --onto base
#
source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)
if cherry_pick_in_progress;then
   cecho red "cherry-pick in progress!" >&2
   exit 1
fi

# necessary?
unsetopt FUNCTION_ARGZERO
SILENT=n
onto=""

usage()
{
    cat <<EOF
usage: ${0##*/} [-qv] [-o onto] [--] [segment]
-o onto some commit, by default onto its BASE.
-v verbose
-q quiet
-s stash-if-needed

-n dry
segment ... segment-name, by default the current branch.
EOF
}

dry=n
while getopts :hno:qsv OPT; do
    case $OPT in
        h)
            usage
            exit 0
            ;;
        s)
            stash_if_needed=y
            ;;
        n)
            dry=y
            ;;
        o)
            onto=$OPTARG
            ;;
        q)
            SILENT=y
            ;;
        v)
            SILENT=n
            ;;
        *)
            echo "unexpected option $OPT">&2
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

#fixme:
if [ $# = 0 ]; then
    # default is the current branch
    segment=$(current_branch_name)
elif [ $# = 1 ]; then
    segment=${1}
fi

cd $(git rev-parse --show-toplevel);
segment=${segment#refs/heads/}

if ! git-segment $segment >/dev/null ;
then
    echo "this is not a segment" >&2
    exit 1
fi


# not needed "ref/
start="refs/start/$segment"
if [ -z $onto ]; then
   # the base
   onto=$(segment_base_name $segment)
fi

if [[ $dry = y ]];
then
    if [[ $(git rev-parse $start) = $(git rev-parse $onto) ]];
    then
        exit 0
    else
        echo "should rebase segment $segment" >&2
        exit 0
    fi
fi

### STASH:
mmc_stash_if_non_clean "git-rebase-segment saving"

rebase_empty_segment()
{
    local -r name=$1
    local -r base=$2
    cecho yellow "rebase_empty_segment $name"

    set_branch_to $name $base
    git-reset-segment $name
}

if test $(commit_id $start) = $(commit_id $onto);
then
    test $SILENT = n && \
        {echo -n "no need to rebase segment ";cecho cyan $segment} >&2
    exit 0
elif test $(commit_id $start) = $(commit_id heads/$segment);
then
    rebase_empty_segment $segment $onto
    exit 0
fi

{cecho yellow -n "rebasing segment ";cecho cyan $segment} >&2

# This might fail. in that case:
# 1/ save the state, to reinvoke later:

# For now I can do without the hooks. At least in the succesful case.
export GIT_USE_COLOR=y

# fixme: this establishes a binding, and one cannot --delete w/o merging into $onto.
#
if git checkout --no-track -B temp $onto &&
   git cherry-pick $start..heads/$segment

## the alternative way:
# git rebase --onto $onto $start $segment;
then
    exit_status=0
    git-done-segment $segment "temp"
else
    exit_status=1
    mark_rebase_segment $segment
fi

mmc_unstash_if_stashed

exit $exit_status
