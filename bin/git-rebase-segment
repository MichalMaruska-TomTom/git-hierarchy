#! /usr/bin/zsh -feu

# rebase  start...segment --onto base

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)


usage()
{
    print "usage: ${0##*/} [--] ARGS..."
}

while getopts :h OPT; do
    case $OPT in
	h)
	    usage
	    exit 0
	    ;;
	*)
	    print "usage: ${0##*/} [--] ARGS..."
	    exit 2
    esac
done
shift OPTIND-1
OPTIND=1


# fixme: canonize!
branch=${1#refs/heads}

# not needed "ref/
start="refs/start/$branch"
base="refs/base/$branch"

if ! git-segment $branch >/dev/null ;
then
    exit 1
fi

commit_id()
{
    #local sha=$(git rev-list  --max-count=1 $commit)
    git rev-parse $1
}


if test $(commit_id $start) = $(commit_id $base);
then
    {echo -n "no need to rebase segment ";cecho cyan $branch} >&2
    exit 0
fi

{echo -n "rebasing segment ";cecho cyan $branch} >&2
# This might fail. in that case:
# 1/ save the state, to reinvoke later:
if git rebase --onto $base $start $branch;
then
    # todo: git-segment $branch $base
    git-set-start $branch $base
else
    echo "$branch" > $GIT_DIR/.rebasing-segment
    cecho red "** ERROR: Rebase failed."
    echo "Finish the rebase manually (resolve conflicts, and git rebase --continue or --skip"
    cecho green "then run:"
    echo -e "\tgit-reset-segment $branch"
    exit 1
fi

