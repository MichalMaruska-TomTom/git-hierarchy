#! /usr/bin/zsh -feu

# rebase  (start...segment) --onto base
#
source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)
unsetopt FUNCTION_ARGZERO
SILENT=n
onto=""
STASHED=no

usage()
{
    cat <<EOF
usage: ${0##*/} [-qv] [-o onto] [--] [branch]
-o onto some commit, by default onto its BASE.
-v verbose
-q quiet
-s stash-if-needed

branch ... segment-name, by default the current branch. 
EOF
}

while getopts :hqvso: OPT; do
    case $OPT in
        h)
            usage
            exit 0
            ;;
        s)
            stash_if_needed=y
            ;;
        o)
            onto=$OPTARG
            ;;
        q)
            SILENT=y
            ;;
        *)
            usage
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

#fixme:
if [ $# = 0 ]; then
    # default is the current branch
    branch=$(current_branch_poset)
elif [ $# = 1 ]; then
    branch=${1}
fi

branch=${branch#refs/heads/}

if ! git-segment $branch >/dev/null ;
then
    exit 1
fi


### STASH:
set +u
. /usr/lib/git-core/git-sh-setup
set -u

if require_clean_work_tree "merge" "$(gettext "Please commit or stash them.")"
then
    :
else
    cmd=""
    # todo: orange:
    cecho yellow "stashing for you..."
    eval $cmd git stash save "git-sum-branches saving"
    STASHED=yes
fi

# not needed "ref/
start="refs/start/$branch"
if [ -z $onto ]; then
   # the base
   onto="refs/base/$branch"
fi

if test $(commit_id $start) = $(commit_id $onto);
then
    test $SILENT = n && \
        {echo -n "no need to rebase segment ";cecho cyan $branch} >&2
    exit 0
fi

{cecho yellow -n "rebasing segment ";cecho cyan $branch} >&2

# This might fail. in that case:
# 1/ save the state, to reinvoke later:

# For now I can do without the hooks. At least in the succesful case.
if git rebase --onto $onto $start $branch;
then
    # This is also the content of the rebase-complete hook!
    # although there we need to recover the "state", so `git-reset-segment'
    # and clean it after.
    git-segment --restart $branch $onto

else
    if [ ! -e $GIT_DIR/rebase-apply/final-commit ]; then
        cecho "red" "rebase didn't even start -- perhaps 'stash' is needed?"
        cecho "red" "assuming it didn't start"
        exit 1
    fi
    # show the broken commit:
    cecho hiyellow $(cat $GIT_DIR/rebase-apply/final-commit)

    # So save the state for `git-reset-segment' -- invoked by the hooks.
    echo "$branch" > $GIT_DIR/.rebasing-segment

    # here the user *will* use git --continue --skip --abort.
    # so register hooks to resume our work:
    check_git_rebase_hooks

    cecho red "** ERROR: Rebase failed."
    echo "Finish the rebase manually (resolve conflicts, and git rebase --continue or --skip"
    cecho green "then run:"
    echo -e "\tgit-reset-segment $branch"
    exit 1
fi
