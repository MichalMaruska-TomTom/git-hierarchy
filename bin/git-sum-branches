#! /usr/bin/zsh -feu

usage()
{
    cat <<EOF
Remake a git sum/merge. (akin 'rebase' for segments)

usage: ${0##*/} [-d] [+-r] [-h] [-s] [--] {sum}
-d  dry

-r  reset before starting merge. Default
+r  don't reset.

-v  verbose
-q  quiet (not-implemented)

-s  stepwise: don't try to merge in 1 git-merge.
.... can contain upstream Git(1) options.

-h  help
EOF
}

source /usr/share/git-hierarchy/functions.sh
source /usr/share/mmc-shell/mmc-functions.sh
check_getopt

GIT_DIR=$(git_dir)
# fixme:
cd $(git rev-parse --show-toplevel)


# by default make a `clean' merge. This means
reset=y
dry=n
cmd=""

debug=n
quiet=no

stepwise=0

cmd_options=$(getopt --name $0 --shell bash \
        --longoptions dry,help,quit,reset,stepwise,verbose \
        --options     dhnqrsv \
        -- "$@") || { usage && exit 1 }

eval set -- "$cmd_options"
while (( $# > 0 )); do
    case $1 in
        -d | --dry | -n)
            dry=y
            cmd="cecho red"
            ;;
        -h | --help)
            usage
            exit
            ;;
        -q | --quiet)
            quiet=yes
            ;;
        -r | --reset)
            reset=y
            ;;
        -s | --stepwise )
            stepwise=1
            ;;
        -v | --verbose | --debug)
            debug=y
            ;;
        --)
            shift
            break
        ;;
        *)
            echo "unexpected option $OPT">&2
            usage>&2
            exit 2
    esac
    shift
done

if [ $# != 1 ]; then
    echo "missing arguments">&2
    usage>&2
    exit 1
fi

sum_name=$(ref_extract_name $1)

if ! is_sum $sum_name &>/dev/null ;
then
    echo "$sum_name is not a sum branch (in $GIT_DIR)" >&2
    summands_of $sum_name >&2
    exit 1
fi

### same as `test_sum_is_intact', but we need real_branches ourselves:
typeset -a real_branches

sum_resolve_summands $sum_name
debug_trace "Summands: $real_branches"

# y ... gives priority to heads, remotes, generic
sum_ref=$(expand_ref $sum_name y)

equal=n
# This is the `situation':
# sanity check:
debug_trace "sanity check"
if git-branch-exists $sum_name;
then
    test_commit_parents --strict $sum_ref $real_branches[@]
else
    git branch $sum_name
fi
# todo?: if exists such branch/tag ->abort

if test "$equal" = y;
then
    if [[ $quiet != yes ]]; then
        {
            echo -n "no need to merge again -- the sum ";
            # todo: debug ?
            cecho magenta -n $sum_name
            echo " is up-to-date (as defined)."
        } >&2
    fi
    exit 0
fi

if [[ $dry = y ]]
then
    echo "should re-sum $sum_name" >&2
    exit 0
fi


mmc_stash_if_non_clean "git-sum-branches saving"


test $debug = y && echo "checkout & merge" >&2
####################################### Merge
# no way. `git-checkout' prefers branches (over tags)
# http://programmers.stackexchange.com/questions/230438/in-git-is-it-a-bad-idea-to-create-a-tag-with-the-same-name-as-a-deleted-branch
first=$real_branches[1]
first_branch=$(expand_ref $first)

get_temp_branch()
{
    echo "_tmp"
}

readonly work_branch=$(get_temp_branch)
if [ $reset = "y" ]; then
    # Is this really necessary? only if
    #if [ $sum_branch = $(git branch) ]; then
    eval $cmd git checkout --detach $first
    #fi
    eval $cmd git branch --force $work_branch HEAD
    eval $cmd git checkout $work_branch
else
    eval $cmd git checkout $work_branch $sum_name
    # but here it is needed:
    eval $cmd git merge $first_branch
fi
# git checkout -b $sum_name $first

if test ${#real_branches} = 1;
then
    # if empty, we are done!
    test $debug = y && echo "the sum is trivial - 1 summand, no merging"
else
    others=($real_branches[2,-1])
# octopus is default (for >2 children) & refuses any conflict.

    {cecho green -n "re-merging sum ";cecho cyan $sum_name} >&2
    set -x
    if [ $stepwise = 0 ]; then
        eval $cmd git merge -m '"Sum: $sum_name = $first + $others"' \
             --rerere-autoupdate \
             --strategy octopus \
             --strategy recursive --strategy-option patience --strategy-option ignore-space-change $others
    else
        foreach next ($others)
        {
            eval $cmd git merge -m "'Sum: $next into $sum_name'" --rerere-autoupdate "'$next'";
        }
    fi
fi

# Even in the trivial case!
git branch --force $sum_name $work_branch
git switch $sum_name
git branch --delete $work_branch
mmc_unstash_if_stashed

exit 0
