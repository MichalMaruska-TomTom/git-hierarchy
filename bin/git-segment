#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

PROGRAM=${0##*/}

usage()
{
    cat <<EOF
usage:
$PROGRAM [+-s]
  List the segments, short-format
$PROGRAM [--] branch
  Show the definition
$PROGRAM [-dC] branch
  Delete the definition, and even the branch itself.
$PROGRAM [--] branch symbolic-base [current-base]
  Define
  DWIM: If already exists, change the base. or even current-base.
EOF
}


delete_segment=n
delete_branch=n
short_list=n

while getopts :hsdD OPT; do
    case $OPT in
	h|+h)
	    usage
	    exit 0
	    ;;
	s)
	    short_list=y
	    ;;
	d)
	    delete_segment=y
	    ;;
	D)
	    delete_segment=y
	    delete_branch=y
	    ;;
	*)
	    print "usage: ${0##*/} [+-h} [--] ARGS..."
	    exit 2
    esac
done
shift OPTIND-1
OPTIND=1



## `list' all segments:
if [ $# = 0 ]; then
    git for-each-ref 'refs/base/' --format "%(refname)" |\
        sed -e 's|^refs/base/||' |\
    while read segment;
    do
	echo -e -n $segment
	if [ $short_list = n ]; then
	    echo -en "\t\t";
	    echo ${$(dump_ref_without_ref "refs/base/$segment")#refs/heads/}
	else
	    echo
	fi
    done
    if false; then
	echo
	git for-each-ref 'refs/start/' --format "%(refname)" |\
            sed -e 's|^refs/start/||'
    fi
    exit 0;
fi


name=$1
baseref=refs/base/$name
startref=refs/start/$name


describe_segment()
{
    # fixme: how to avoid dereferencing?
    # git show-ref $startref

    base=$(dump_ref $baseref |\
           sed -e 's/^ref: //' | sed -e 's|^refs/heads/||')
    cecho green $base

    git show-ref --hash  $startref

    # how many commits there?
    count=$(git log --oneline $startref..heads/$name |wc --lines)
    echo $count commits:
    git log --oneline $startref..heads/$name
}


if [ $# = 1 ]; then
    if [ $delete_segment = y ]; then

	echo "use git-delete(1)"
	exit 1

	describe_segment || true

        # git update-ref -d  refs/base/test "refs/heads/master"
        # removes master!

	# funny: bug!
	drop_segment $victim

	## necessary?
	if [ $delete_branch = y ];then
	    git-delete $name
	fi
    else
    ## `Describe' the (given) segment
    # cat $basefile
    # could be hash
    # or ref - tag or head.
	describe_segment
    fi
else

    # `update/setup' the segment definition
    from=$2
    base=$(git-expand-ref $from)

    ##
    if git-branch-exists $name; then
	if is_segment $name; then
	    if [ $# = 2 ]; then
		cecho yellow "Changing the base to $base"
		git symbolic-ref $baseref $base
		exit
	    fi
	fi
    fi
    #   just move the base !
    # fi
    # User specified -> official:
    cecho yellow "so the base is $base"

    if [ $# -ge 3 ]; then
	# fixme: check that it's an ancestor.
	start_hash=$(git log $3 --max-count=1 --format="%H")
    else
	start_hash=$(git show-ref --hash $base)
    fi
    cecho yellow "so the start is $start_hash"
    # git show $start_hash

    # branch_exists $name
    git-branch-exists $name || git branch $name $start_hash


    #mkdir -p $(dirname $basefile) $(dirname $startfile)
# canonize:
    #echo $start_hash > $startfile
    git-set-start $startref $start_hash

    #echo "ref: $base" > $basefile
    git symbolic-ref $baseref $base
fi
