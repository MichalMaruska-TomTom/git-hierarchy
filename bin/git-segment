#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh

SEGMENT_PREFIX=""

source /usr/share/mmc-shell/mmc-functions.sh
check_getopt

usage()
{
    # Functions/Misc/colors
    # NO_COLOR
    colors

    local SEGMENT="$fg_bold[red]{segment-name}$reset_color"
    local program="${PROGRAM##*/}"
    cat <<EOF
usage:

$program [-s| --short] [-f | --full] [ --diff -p ]
  LIST the segments, -s short-format
  Full implies output ref/heads/XXX instead of XXX

$program [-i] $SEGMENT
  SHOW the definition & dump the commits/history
  Exit with non-zero, if the segment-name is not a segment.
  -i  show the patch-ids instead

$program [-d | --delete | -D | --prune] $SEGMENT
  DELETE the definition, and even the branch itself.

$program -r | --restart  $SEGMENT {start}
  set the start

$program [-u | --update ] [-b | --rebase] $SEGMENT symbolic-base [start]
  change base (start)
  -b  and rebase immediately

$program [-c | --checkout] $SEGMENT symbolic-base [start] [head]
  DEFINE

EOF
}

output_dirty()
{
    segment=$1
    prefix=$2
    local count=$(segment_age $segment)
    if [ $count = 0 ]; then
        echo "clean"
    else
        echo -e $prefix"dirty: $count"
    fi
}

diff_segment()
{
    local name=$1
    local startref=refs/start/$name
    git diff $startref..$name
}

describe_segment()
{
    local name=$1
    local baseref=$(segment_base_name $name)
    local startref=refs/start/$name
    #$baseref
    colors
    # fixme: how to avoid dereferencing?
    # git show-ref $startref

    if ref_exists $baseref;
    then
        # set -x
        if [[ $only_table != y ]]
        then
            local base=$(dump_ref_without_ref $baseref)
            local base_name=$(ref_extract_name $base)

            print "base is $fg_bold[green]$base_name$reset_color ($base)"

            output_dirty $name ""
            echo -n "start is "; git show-ref --hash $startref

            local count=$(git log --oneline $startref..heads/$name |wc --lines)
            cecho yellow "$count commits"
        fi
        # how many commits there?
        if [[ $short_list != y ]]; then
            # git patch-id
            if [[ $show_patch_id = n ]];
            then
                git log --oneline $startref..heads/$name
            else
                # 2 implementations:
                if false; then
                    git rev-list $startref..heads/$name| {
                        while read sha; do
                            git show $sha | git patch-id --stable
                        done
                    }
                else
                    git log --oneline $startref..heads/$name | {
                        while read sha rest;
                        do
                            git show $sha | git patch-id --stable| read diff sha; echo "$diff $sha $rest"
                        done
                    }
                fi
            fi
        fi
    else
        echo "$name is not a segment -- no 'base' found">&2
        exit 1
    fi
}

list_segments(){
    # todo short_list as parameter?
    # todo: use describe_segment?
    git for-each-ref 'refs/base/' --format "%(refname)" |\
        sed -e 's|^refs/base/||' |\
    while read segment;
    do
        echo -e -n "$SEGMENT_PREFIX$segment"

        if [ $short_list = n ]; then
            echo -en "\t";
            echo -n ${$(dump_ref_without_ref "refs/base/$segment")#refs/heads/} "\t"

            output_dirty $segment "\t"
        else
            echo
        fi
    done
}

check_existing_segment()
{
    local name
    name=$1
    if ! is_segment $name; then
        die "unknown segment $name"
    fi
}

rebase_immediately=n
delete_branch=n

short_list=n
show_patch_id=n
only_table=n

verbose=no
checkout=n

CMD=""
RESERVED_CMD=""

update_cmd()
{

    if [[ -n $CMD ]];
    then
        echo "" >&2
        usage
        exit 1
    fi

    CMD=$1

    # delayed check:
    if [[ -n $RESERVED_CMD ]]; then
        if [[ $CMD != $RESERVED_CMD ]]; then
            die "mess in options"
        fi
    fi
}

ensure_cmd()
{
    # if CMD is not set, use RESERVED_CMD and then check it
    # can I repeat?
    if [[ -n $CMD ]]; then
        if [[ $CMD != $1 ]]; then
            die "mess in options"
        fi
    else
        RESERVED_CMD=$1
    fi
    # update_cmd $1
}


# This inserts '--'?
cmd_options=$(getopt --name $0 --shell bash \
        --longoptions checkout,delete:,diff:,full,help,patch-id,prune:,rebase,short,update:,restart:,verbose \
        --options     bd:D:cfihp:r:su:v \
        -- "$@") || { usage && exit 1 }

eval set -- "$cmd_options"
while (( $# > 0 )); do
    case $1 in
        -h | --help)
            usage
            exit 0
            ;;
        -v | --verbose)
            verbose=yes
            ;;

        -p | --diff)
            shift
            segment=$1
            update_cmd diff
            ;;
        -i | --patch-id)
            only_table=y
            short_list=n
            show_patch_id=y
            ;;

        -d | --delete)
            update_cmd delete
            shift
            segment=$1
            ;;
        -D | --prune )
            update_cmd delete
            delete_branch=y

            shift
            segment=$1
            ;;

        -f | --full)
            update_cmd list
            # fixme: unused:
            SEGMENT_PREFIX=ref/head/
            ;;
        -s | --short)
            # this could also be info
            # ensure_cmd 'list'
            # either 'info'
            short_list=y
            ;;

        -b | --rebase)
            # ensure_cmd 'update'
            rebase_immediately=y
            ;;
        -u | --update)
            update_cmd 'update'
            shift
            segment=$1
            check_existing_segment $segment
            ;;
        -r | --restart)
            update_cmd 'restart'
            shift
            segment=$1
            check_existing_segment $segment
            ;;

        -c | --checkout)
            # sure?
            update_cmd 'define'
            checkout=y
            ;;
        --)
            shift
            break
        ;;
    esac
    shift
done
GIT_DIR=$(git_dir)

# $# max message
check_maximum_arguments()
{
    if [[ $1 -gt $2 ]]; then
        # fixme: dangling arguments -> error!
        local count=$(( $1 - $2 ))
        echo "$count dangling arguments ${3-$CMD}"
        usage >&2
        exit 1
    fi
}

# if no CMD
# 0 arguments -> LIST
# 1 argument -> info on that segment.
# 2-4 arguments -> DEFINE
# set -x

if [[ -z $CMD ]]; then
    # determine:
    ## `list' all segments, and the Bases.
    if [[ $# = 0 ]]; then
        update_cmd list
    elif [[ $# = 1 ]]; then
        update_cmd info
            # git update-ref -d  refs/base/test "refs/heads/master"
            # removes master!
            ## `Describe' the (given) segment
            # cat $basefile
            # could be hash
            # or ref - tag or head.
    elif [[ $# -le 4 ]]; then
        update_cmd define
    else
        echo "dangling arguments"
        usage >&2
        exit 1
    fi
else
    # this is not true!
    # check_maximum_arguments $# 1
    :
fi

case $CMD in
    list)
        check_maximum_arguments $# 0
        list_segments | column -t
        # ubuntu 20.04 does not support --table

        # Dump the starts?
        if [[ $verbose = yes ]];
        then
            echo
            git for-each-ref 'refs/start/' --format "%(refname)" |\
                sed -e 's|^refs/start/||'
        fi
        exit 0
        ;;
    info)
        segment=$1
        check_existing_segment $segment
        describe_segment $segment
        exit 0
        ;;
    delete)
        check_existing_segment $segment
        describe_segment $segment|| true

        # funny: bug!
        # todo: see `git-delete' for the real check
        drop_segment $segment

        if [[ $delete_branch = y ]]; then
            git-delete $segment
        fi

        # fixme indentation? ... it was due to  ";then" without space!
        exit $?
        ;;
    define)
        check_maximum_arguments $# 4 "define"
        segment=$1
        # base is either generic branch (not tag) or segment/sum
        base=$(ref_extract_name $2)
        base=$(expand_ref heads/$base)

        if [[ $# -gt 2 ]]; then
            start=$3
        else
            start=$base
        fi

        # start_hash=$(git log $start --max-count=1 --format="%H" --)
        # get the sha:
        # git log $base --max-count=1 --format="%H"
        start_hash=$(commit_id $start)

        # no updaten -> start is defined:
        if ! git-branch-exists $segment; then
            # check now ... b/c ? fixme!
            # it can be HEAD
            if [[ $# = 4 ]]; then
                git rev-parse $4 >/dev/null
            fi
            # fixme: maybe crate at $4 !!!
            # Create it:
            git branch $segment $start_hash
        fi

        if [[ $# = 4 ]]; then
            set_branch_to $segment $4
        fi

        git-set-start $segment $start_hash

        # set base to:
        local baseref=$(segment_base_name $segment)
        git symbolic-ref $baseref $base

        if [[ $checkout = y ]];
        then
            git switch $segment
        fi
        ;;
    update)
        set -x
        new_base=$1
        check_maximum_arguments $# 1

        new_base=$(expand_ref $new_base)
        local baseref=$(segment_base_name $segment)
        git symbolic-ref $baseref $new_base

        if [[ $rebase_immediately = "y" ]]; then
            git-rebase-segment $segment
        fi

        ;;
    restart)
        local new_start=$1
        check_maximum_arguments $# 1

        start_hash=$(commit_id $new_start)
        # take the start_hash
        git-set-start $segment $start_hash
        ;;
    diff)
        check_maximum_arguments $# 0
        diff_segment $segment
        ;;
    *)
        usage >&2
        exit 1
esac

exit
