#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

usage()
{
    cat <<EOF
usage:
${0##*/} [+-h]
  List the segments
${0##*/} [--] branch
  Show the definition
${0##*/} [-dC] branch
  Delete the definition, and even the branch itself.
${0##*/} [--] branch symbolic-base [current-base]
  Define
EOF
}


delete_segment=n
delete_branch=n


while getopts :hdD OPT; do
    case $OPT in
	h|+h)
	    usage
	    exit 0
	    ;;
	d)
	    delete_segment=y
	    ;;
	D)
	    delete_segment=y
	    delete_branch=y
	    ;;
	*)
	    print "usage: ${0##*/} [+-h} [--] ARGS..."
	    exit 2
    esac
done
shift OPTIND-1
OPTIND=1



## `list' all segments:
if [ $# = 0 ]; then
    git for-each-ref 'refs/base/' --format "%(refname)" |\
        sed -e 's|^refs/base/||'
    if false; then
	echo
	git for-each-ref 'refs/start/' --format "%(refname)" |\
            sed -e 's|^refs/start/||'
    fi
    exit 0;
fi


name=$1
baseref=refs/base/$name
startref=refs/start/$name


describe_segment()
{
    # fixme: how to avoid dereferencing?
    # git show-ref $startref

    #git symbolic-ref
    base=$(cat $GIT_DIR/$baseref|\
           sed -e 's/^ref: //' | sed -e 's|^refs/heads/||')
    cecho green $base

    git show-ref --hash  $startref

    # how many commits there?
    count=$(git log --oneline $startref..heads/$name |wc --lines)
    echo $count commits:
    git log --oneline $startref..heads/$name
}


if [ $# = 1 ]; then
    if [ $delete_segment = y ]; then

	describe_segment || true

#  git update-ref -d  refs/base/test "refs/heads/master"
# removes master!

	rm -f $GIT_DIR/$baseref || true
	rm -f $GIT_DIR/$startref || true
	#git update-ref -d $startref || true
	#git update-ref -d $baseref || true

	## necessary?
	if [ $delete_branch = y ];then
	    git branch -d $name
	fi
    else
    ## `Describe' the (given) segment
    # cat $basefile
    # could be hash
    # or ref - tag or head.
	describe_segment
    fi
else

    # `update/setup' the segment definition
    from=$2

    # User specified -> official:
    base=$(git show-ref $from|head -n 1|cut -f 2 -d ' ')
    cecho yellow "so the base is $base"

    if [ $# -ge 3 ]; then
	# fixme: check that it's an ancestor.
	start_hash=$(git log $3 --max-count=1 --format="%H")
    else
	start_hash=$(git show-ref --hash $from)
	#if [ ${start} -gt 1 ]; then error;fi
    fi
    cecho yellow "so the start is $start_hash"
    # git show $start_hash

    # branch_exists $name
    git-branch-exists $name || git branch $name $start_hash


    #mkdir -p $(dirname $basefile) $(dirname $startfile)
# canonize:
    #echo $start_hash > $startfile
    git-set-start $startref $start_hash

    #echo "ref: $base" > $basefile
    git symbolic-ref $baseref $base
fi
