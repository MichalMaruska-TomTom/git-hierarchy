#! /usr/bin/zsh -feu

source /usr/share/git-hierarchy/functions.sh

SEGMENT_PREFIX=""
if getopt -T; then # should test (( $? = -4 ))
    echo "incompatible  getopt(1) installed. Abort"
    exit -1
fi

usage()
{
    cat <<EOF
usage:
$PROGRAM [-s| --short] [-f | --full]
  LIST the segments, -s short-format
  Full implies output ref/heads/XXX instead of XXX

$PROGRAM {segment-name}
  SHOW the definition & dump the commits/history
  Exit with non-zero, if the segment-name is not a segment.

$PROGRAM [-d | --delete | -D | -prune] name
  DELETE the definition, and even the branch itself.

$PROGRAM -r {segment} {start}
  set the start

$PROGRAM [-u | --update ] {segment} symbolic-base [start]
  update


$PROGRAM [-c | --checkout] {segment} symbolic-base [start] [head]
  DEFINE

EOF
}

output_dirty()
{
    segment=$1
    prefix=$2
    local count=$(segment_age $segment)
    if [ $count = 0 ]; then
        echo
    else
        echo -e $prefix"dirty: $count"
    fi
}

diff_segment()
{
    local name=$1
    local startref=refs/start/$name
    git diff $startref..$name
}

describe_segment()
{
    local name=$1
    local baseref=$(segment_base_name $name)
    local startref=refs/start/$name
    #$baseref

    # fixme: how to avoid dereferencing?
    # git show-ref $startref

    if ref_exists $baseref;
    then
        # set -x
        local base=$(dump_ref_without_ref $baseref |\
           sed -e 's|^refs/heads/||')
        echo -n "base is "; cecho green "$base"

        output_dirty $name ""
        git show-ref --hash $startref

        # how many commits there?
        local count=$(git log --oneline $startref..heads/$name |wc --lines)
        echo "$count commits"
        if [[ $short_list != y ]]; then
            git log --oneline $startref..heads/$name
        fi
    else
        echo "$name is not a segment -- no 'base' found">&2
        exit 1
    fi
}

list_segments(){
    # todo short_list as parameter?
    # todo: use describe_segment?
    git for-each-ref 'refs/base/' --format "%(refname)" |\
        sed -e 's|^refs/base/||' |\
    while read segment;
    do
        echo -e -n "$SEGMENT_PREFIX$segment"

        if [ $short_list = n ]; then
            echo -en "\t\t";
            echo -n ${$(dump_ref_without_ref "refs/base/$segment")#refs/heads/}

            output_dirty $segment "\t"
        else
            echo
        fi
    done
}

delete_segment=n
delete_branch=n
short_list=n

checkout=n
update=n
restart=n
cmd_options=$(getopt --name $0 --shell bash \
        --longoptions help,short,delete,prune,update:,restart,full,diff,checkout \
        --options     hsdDurfpc \
        -- "$@") || { usage && exit 1 }

eval set -- "$cmd_options"
while (( $# > 0 )); do
    case $1 in
        -h | --help)
            usage
            exit 0
            ;;
        -f | --full)
            SEGMENT_PREFIX=ref/head/
            ;;
        -s | --short)
            short_list=y
            ;;
        -d | --delete)
            delete_segment=y
            ;;
        -p | --diff)
            patch_segment=y
            ;;

        -D | --prune )
            delete_segment=y
            delete_branch=y
            ;;
        -u | --update)
            update=y
            ;;
        -r | --restart)
            restart=y
            # new_start=$OPTARG
            ;;
        -c | --checkout)
            checkout=y
            ;;
        --)
            shift
            break
        ;;
    esac
    shift
done
GIT_DIR=$(git_dir)

## `list' all segments, and the Bases.
if [ $# = 0 ]; then
    list_segments

    # Dump the starts?
    if false; then
        echo
        git for-each-ref 'refs/start/' --format "%(refname)" |\
            sed -e 's|^refs/start/||'
    fi
    exit 0;
fi


# Otherwise a specific segment:
name=${1#refs/heads/}
local baseref=$(segment_base_name $name)
# echo "the segment name is $name"

if [ $# = 1 ]; then
    if [ $delete_segment = y ]; then

        # fixme:
        describe_segment $name|| true

        # funny: bug!
        drop_segment $name

        if [ $delete_branch = y ];then
            git-delete $name
        fi

        exit $?

        # git update-ref -d  refs/base/test "refs/heads/master"
        # removes master!
    elif [ ${patch_segment-n} = y ]; then
        diff_segment $name
    else
    ## `Describe' the (given) segment
    # cat $basefile
    # could be hash
    # or ref - tag or head.
        describe_segment $name
        exit 0
    fi
else
    # 4 options:

    # 1/ defining (not updating) -- so it does not exist!

    # 2/          possibly start=base

    # 3/ update start
    # 4/        base  or both!

    # we have: new_start, new_base

    if [ $# = 2 ];
    then
        # moving the `base' or `start'
        if [ $restart = y ]; then
            new_start=$2
            start_hash=$(commit_id $new_start)
            # git rev-parse
            # git log $new_start --max-count=1 --format="%H" --
        else
            # fixme: use rev-parse
            new_base=$(try_to_expand $2)
            #possibly remotes/$2

            if [ $update = n ]; then
                # in this case ... we create ... we have to provide the
                # start, so default is the trivial segment (base = start):
                start_hash=$(git log $new_base --max-count=1 --format="%H")
            fi
        fi
    else
        new_base=$2
        # only in this case, there is this variable:
        start=$3
        # fixme: check that it's an ancestor (of segment's head)
        start_hash=$(git log $start --max-count=1 --format="%H" --)
    fi

    # by now we determined the necessary base / start.
    # iow. $start_hash is always defined, unless: _update_ & not restart
    # and $base unless update & restart.

    # Ensure it exists:
    if [ $update = y -o $restart = y ]; then
        # check it exists
        if ! is_segment $name; then
            die "unknown segment $name"
        fi
    else
        # no update -> start is defined:
        if ! git-branch-exists $name; then
            # check it:
            if [[ $# = 4 ]]; then git rev-parse $4; fi
            # Create it:
            git branch $name $start_hash
        fi
        # doing in this order intentionally?
        if is_segment $name; then
            die "segment already exists: $name"
        fi
    fi

    # echo "new: base: ${new_base-} start: ${new_start-}"

    # `update/setup' the segment definition
    # fixme: remove ""
    if [[ -n "${new_base-}" ]]; then
        new_base=$(expand_ref $new_base)
        # cecho yellow "so the base is ${new_base-}"

        cecho yellow "Changing the base to $new_base"
        git symbolic-ref $baseref $new_base
    fi

    # User specified -> official:
    if [ -n "${start_hash-}" ]; then
        cecho yellow "pushing the start to $start_hash"
        git-set-start $name $start_hash
    fi

    if [ $# = 4 ]; then
        git branch --force $name $4
    fi

    if [ $checkout = "y" ]; then
        git checkout $name
    fi
fi
