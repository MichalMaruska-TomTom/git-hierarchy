#! /usr/bin/zsh -feu

# Generate list of my known branches (sums & segments)
# and output them in topological order.

# note this generates the graph "globally", not by search.

source /usr/share/git-hierarchy/functions.sh

keep_graph_file="n"
just_graph=n

if [[ -n "${DISPLAY-}" ]]
then
    segment_format=dot
    dump_action=x
else
    dump_action=log
    segment_format=tsort
fi

verbose=n
typeset -a draw_options

debug=no
usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-k]  choose-format  [--]
-d debug

-i ignore mis-alignment

-x display using  dot(1)

-t just dump the tsort lines
  -g don\'t dump the topological order on stdout.

-k keep the generated file (for tsort(1))

Format:
-g
-x   Xdot
-l   git log
-r   resolved .... what does it do with Sums? NOTHING!
-s   symbolic
-t   tsort input/output
EOF
    unsetopt POSIX_ARGZERO
}

while getopts :dgi:klrstx OPT; do
    case $OPT in
        d)
            verbose=y
            debug=y
            ;;
        g)
            just_graph=y
            ;;
        i)
            # fixme: check that it exists (is a sum/segment):
            ref=$OPTARG
            if is_segment $ref || is_sum $ref; then
                known_divergent+=($ref)
            else
                {
                    echo "${0##*/}: invalid argument (for -i option): '$ref'"
                    usage
                } >&2
                exit 1
            fi
            ;;
        k|+k)
            keep_graph_file=y
            draw_options+=(-k)
            ;;
        l)
            dump_action=log
            segment_format=tsort
            ;;
        r)
            dump_action=resolved
            segment_format=resolved
            ;;
        s)
            dump_action=symbolic
            segment_format=symbolic
            ;;
        t)
            # symbolic vs tsort ?
            # tsort is input to tsort(1): just the names & their dependency
            # symbolic is description ... & the sorting is done by some internal tool.
            segment_format=tsort
            dump_action=tsort
            ;;

        x)
            dump_action=x        # dot
            segment_format=dot
            ;;
        *)
            usage
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

GIT_DIR=$(git_dir)
readonly GRAPH=$(mktemp -t graph.XXX)
extern_color=pink

# segments ... look at bases.
setopt NULL_GLOB

# why temp file?
# tsort doesn't need it (- is ok)
# my ../../mmc-shell/bin/draw-tsort-graph
# this could be tsort-ed. But this ^ sort it too.


# only 1?
if [ $# = 0 ]; then
    # default:
    # fixme: this must SORT topologically!
    global_test_off=y
    dump_whole_graph_tsort $segment_format > $GRAPH
else
    # touch $GRAPH
    typeset -a processed
    processed=()
    foreach top ($@)
    {
        ref_name=$top
        ref_name=${ref_name#refs/heads/}
        # ref_name=$(git rev-parse --symbolic-full-name "HEAD")

        # title="full down from $ref_name"
        sum_format=$segment_format
        walk_down_from --notest $ref_name $segment_format $sum_format >> $GRAPH
        # git-walk-down -f $segment_format $ref_name > $GRAPH
    }
fi

# now the action -- the format of the file is not changed anymore
case $dump_action in
    x)
        draw-tsort-graph $draw_options -x $GRAPH
        ;;
    dot)
        draw-tsort-graph $draw_options -F png $GRAPH | display -
        #dot -Tpng  $GRAPH
        #rm $GRAPH
        ;;
    symbolic)
        column -t -s '	' $GRAPH
        ;;
    resolved)
        # fixme?
        cat $GRAPH
        ;;
    log)
        find_roots_and_tops $GRAPH

        for ((i=1; i<= ${#roots}; i++))
            {
                # echo $i $roots[$i];
                roots[$i]="$roots[$i]^!";
                # echo $roots[$i]
            }
            git log --graph --oneline --decorate $roots $tops --
        ;;
    *)
        if [ $just_graph = y ]; then
            # sort:

            # while read
            for a in $(tsort $GRAPH)
            do
                cecho green $a
                grep -e "^$a" $GRAPH || true
            done
        else
                tsort $GRAPH | tac
        fi

esac


if [ $keep_graph_file != y ]; then
    rm -f $GRAPH
else
    echo "graph left in: $GRAPH" >&2
fi
