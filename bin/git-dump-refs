#!/usr/bin/zsh -feu

# todo: the diff-id does not close over metadata: commit message can be different!

# fixme: duplicates ... at least for `sums' git-tsort!
# so this should be      git-dump-segment-patches

# Output all relevant references: sums, bases, starts

source /usr/share/git-hierarchy/functions.sh
GIT_DIR=$(git_dir)

MAGIC_FILENAME="hierarchy.dump"

# used as:
# git tag "hierarchy-refs" -m "$(/home/git/my/repo/git-hierarchy/bin/git-dump-refs)"
# git notes add -f -m "$(/home/git/my/repo/git-hierarchy/bin/git-dump-refs)"

## git cat-file tag hierarchy-refs | skip-header| git-recover-symbolic-refs
## git cat-file tag hierarchy-refs | tail -n +6 |  git-recover-symbolic-refs

## skip-header  tail -f5

usage()
{
    cat <<EOF
usage: ${0##*/} [+-ho] [--] ARGS...

-o  outputs into  $MAGIC_FILENAME in cwd.
EOF
}

# stdout
integer myfd=1

while getopts :ho OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        o|+o)
            exec {myfd}>$MAGIC_FILENAME
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

##
readonly refs=( $(if [[ $# -ge 1 ]]; then git-walk-down $1; else git-graph -t ;fi ))

dump_segment()
{
    readonly ref=$1

    readonly baseref=$(segment_base_name ${ref#refs/heads/})
    readonly base=$(dump_symbolic_ref $baseref | /bin/sed -e 's|^refs/||')

    cecho red "segment: $ref base $base"
    git-segment-patches -p $ref
}

## o: sort in ascending order
foreach ref ( ${(o)refs} )
{
    if git-sum $ref &> /dev/null;
    then
        if git-check-sum $ref &> /dev/null;
        then
            cecho red "sum: $ref"
            git-sum $ref
        else
            die "sum $ref is dirty" >&2
            exit 1
        fi

    elif git-segment $ref &>/dev/null;
    then
        dump_segment $ref
    else
        cecho red "bottom: $ref" $(git rev-parse $ref)
    fi
} >&$myfd
