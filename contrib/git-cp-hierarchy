#!/bin/zsh -feu

# todo: trap & clean up!

# fixme: it produces the patches even if it later decides to NOT use them.

source /usr/share/git-hierarchy/functions.sh

# Brings git-segments & sum over to another git repository.
# To be able to resume after a failure, existing segments/sums are not
# re-created!

# The `copy' is done by ... declaring the object anew, and populating
# the segments via git-reapply-segment.

usage()
{
    cat <<EOF
usage: ${0##*/} [+-h] [-m from:to] [--] {source-repo} {dest-repo} [ top ]

-m  map the base FROM to TO

Both {source-repo} {dest-repo} are git repositories.

TOP may indicate the top ref. Othwerwise all hierarchy refs are cloned.
EOF
}


# some things need manual mapping: the bottom.
typeset -A base_mapping
base_mapping=()

while getopts :hm: OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        m)
            # set -x
            # note: the names must not contain ":"!
            base_mapping[${OPTARG%:*}]=${OPTARG#*:}
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1


dump_associative_array base_mapping

if [ $# -lt 2 ]
then
    usage >&2
    exit 1
fi

# these Git repositories are involved:
# we will cd  between them, so need a stable/absolute reference to them:
readonly srcdir=$(realpath --canonicalize-existing $1)
readonly destdir=$(realpath --canonicalize-existing $2)

# fixme: one can use --git-dir instead of cd.
cd $srcdir
cd $(git rev-parse --show-toplevel)

typeset -a refs
# the poset top:
readonly refs=( $(if [[ $# -ge 3 ]]; then git-walk-down $3; else git-tsort;fi ))

# am_parameter=(--keep-non-patch)


git_segment_exists()
{
    readonly dir=$1
    readonly segment=$2
    (
        cd $destdir
        git-segment $name >& /dev/null
    )
}


WARN "will port $refs"

# skip over the base
foreach f ($refs) {
    #readonly
    name=${f##*/}
    STEP "$name"

    if git-sum $name >& /dev/null;
    then
        # note: this assumes that the summands are already created!

        # `only' if the sum does not exist yet!
        if ! (cd $destdir; git-sum $name)
        then
            INFO "recreate the sum $name"

            summands=( $(git-sum $name) )
            new_summands=()
            # local s
            foreach s ($summands) {
                local new_summand=${s#refs/heads/}
                new_summand=${base_mapping[$new_summand]-$new_summand}
                new_summands+=($new_summand)
            }

            cd $destdir
            # set -x
            git-sum $name $new_summands
            # immediately, but that is already done?
            git-sum-branches $name
        fi

    elif git-segment $name >& /dev/null;
    then
        if git_segment_exists $destdir $name;
        then
            cecho green "$name already exist"
        else
            # this should be a matter of -b option!
            local base=$(segment_base $name)
            base=${base#refs/heads/}

            if [[ -n "${base_mapping[$base]-}" ]]
            then
                if [[ $base != ${base_mapping[$base]} ]];
                then
                    # rename it:
                    base=$base_mapping[$base]
                    WARN "changing the base of $name to $base"
                fi
            fi

            INFO "create segment $name on its base: $base"
            git-reapply-segment -b $base $srcdir $name $destdir
        fi
    else
       # fixme: make sure the base exists!
       git rev-parse ${base_mapping[$name]-$name} > /dev/null
       WARN "skipping $f -- not a segment nor a sum."
    fi

    cd $srcdir
}
